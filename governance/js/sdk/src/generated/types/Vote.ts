/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { VoteChoice, voteChoiceBeet } from './VoteChoice'
/**
 * This type is used to derive the {@link Vote} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link Vote} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type VoteRecord = {
  Approve: { fields: [VoteChoice[]] }
  Deny: void /* scalar variant */
  Abstain: void /* scalar variant */
  Veto: void /* scalar variant */
}

/**
 * Union type respresenting the Vote data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isVote*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type Vote = beet.DataEnumKeyAsKind<VoteRecord>

export const isVoteApprove = (x: Vote): x is Vote & { __kind: 'Approve' } =>
  x.__kind === 'Approve'
export const isVoteDeny = (x: Vote): x is Vote & { __kind: 'Deny' } =>
  x.__kind === 'Deny'
export const isVoteAbstain = (x: Vote): x is Vote & { __kind: 'Abstain' } =>
  x.__kind === 'Abstain'
export const isVoteVeto = (x: Vote): x is Vote & { __kind: 'Veto' } =>
  x.__kind === 'Veto'

/**
 * @category userTypes
 * @category generated
 */
export const voteBeet = beet.dataEnum<VoteRecord>([
  [
    'Approve',
    new beet.FixableBeetArgsStruct<VoteRecord['Approve']>(
      [['fields', beet.tuple([beet.array(voteChoiceBeet)])]],
      'VoteRecord["Approve"]'
    ),
  ],
  ['Deny', beet.unit],
  ['Abstain', beet.unit],
  ['Veto', beet.unit],
]) as beet.FixableBeet<Vote>
