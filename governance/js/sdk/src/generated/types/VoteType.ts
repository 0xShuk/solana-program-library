/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link VoteType} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link VoteType} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type VoteTypeRecord = {
  SingleChoice: void /* scalar variant */
  MultiChoice: { maxVoterOptions: number; maxWinningOptions: number }
}

/**
 * Union type respresenting the VoteType data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isVoteType*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type VoteType = beet.DataEnumKeyAsKind<VoteTypeRecord>

export const isVoteTypeSingleChoice = (
  x: VoteType
): x is VoteType & { __kind: 'SingleChoice' } => x.__kind === 'SingleChoice'
export const isVoteTypeMultiChoice = (
  x: VoteType
): x is VoteType & { __kind: 'MultiChoice' } => x.__kind === 'MultiChoice'

/**
 * @category userTypes
 * @category generated
 */
export const voteTypeBeet = beet.dataEnum<VoteTypeRecord>([
  ['SingleChoice', beet.unit],

  [
    'MultiChoice',
    new beet.BeetArgsStruct<VoteTypeRecord['MultiChoice']>(
      [
        ['maxVoterOptions', beet.u8],
        ['maxWinningOptions', beet.u8],
      ],
      'VoteTypeRecord["MultiChoice"]'
    ),
  ],
]) as beet.FixableBeet<VoteType>
