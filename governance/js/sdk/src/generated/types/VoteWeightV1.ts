/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link VoteWeightV1} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link VoteWeightV1} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type VoteWeightV1Record = {
  Yes: { fields: [beet.bignum] }
  No: { fields: [beet.bignum] }
}

/**
 * Union type respresenting the VoteWeightV1 data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isVoteWeightV1*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type VoteWeightV1 = beet.DataEnumKeyAsKind<VoteWeightV1Record>

export const isVoteWeightV1Yes = (
  x: VoteWeightV1
): x is VoteWeightV1 & { __kind: 'Yes' } => x.__kind === 'Yes'
export const isVoteWeightV1No = (
  x: VoteWeightV1
): x is VoteWeightV1 & { __kind: 'No' } => x.__kind === 'No'

/**
 * @category userTypes
 * @category generated
 */
export const voteWeightV1Beet = beet.dataEnum<VoteWeightV1Record>([
  [
    'Yes',
    new beet.BeetArgsStruct<VoteWeightV1Record['Yes']>(
      [['fields', beet.fixedSizeTuple([beet.u64])]],
      'VoteWeightV1Record["Yes"]'
    ),
  ],
  [
    'No',
    new beet.BeetArgsStruct<VoteWeightV1Record['No']>(
      [['fields', beet.fixedSizeTuple([beet.u64])]],
      'VoteWeightV1Record["No"]'
    ),
  ],
]) as beet.FixableBeet<VoteWeightV1>
