/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { RealmConfigArgs, realmConfigArgsBeet } from '../types/RealmConfigArgs'

/**
 * @category Instructions
 * @category CreateRealm
 * @category generated
 */
export type CreateRealmInstructionArgs = {
  name: string
  configArgs: RealmConfigArgs
}
/**
 * @category Instructions
 * @category CreateRealm
 * @category generated
 */
export const CreateRealmStruct = new beet.FixableBeetArgsStruct<
  CreateRealmInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['name', beet.utf8String],
    ['configArgs', realmConfigArgsBeet],
  ],
  'CreateRealmInstructionArgs'
)
/**
  * Accounts required by the _CreateRealm_ instruction
 *
  * @property [_writable_] governanceRealm  
* @property [] realmAuthority  
* @property [] communityTokenMint  
* @property [_writable_] communityTokenHoldingAccount This account will be created with the Realm PDA as its owner. seeds=['governance', realm, community_mint] 
* @property [_writable_, **signer**] payer  
* @property [] councilTokenMint (optional)  
* @property [_writable_] councilTokenHoldingAccount (optional) Council Token Holding account - optional unless council is used. 
        PDA seeds: ['governance',realm,council_mint]
        The account will be created with the Realm PDA as its owner 
* @property [_writable_] realmConfig (optional)  
* @property [] communityVoterWeightAddinProgramId (optional) Optional Community Voter Weight Addin Program Id 
* @property [] maxCommunityVoterWeightAddinProgramId (optional) Optional Max Community Voter Weight Addin Program Id  
* @property [] councilVoterWeightAddinProgramId (optional) Optional Council Voter Weight Addin Program Id  
* @property [] maxCouncilVoterWeightAddinProgramId (optional) Optional Max Council Voter Weight Addin Program Id   
  * @category Instructions
  * @category CreateRealm
  * @category generated
  */
export type CreateRealmInstructionAccounts = {
  governanceRealm: web3.PublicKey
  realmAuthority: web3.PublicKey
  communityTokenMint: web3.PublicKey
  communityTokenHoldingAccount: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  councilTokenMint?: web3.PublicKey
  councilTokenHoldingAccount?: web3.PublicKey
  realmConfig?: web3.PublicKey
  communityVoterWeightAddinProgramId?: web3.PublicKey
  maxCommunityVoterWeightAddinProgramId?: web3.PublicKey
  councilVoterWeightAddinProgramId?: web3.PublicKey
  maxCouncilVoterWeightAddinProgramId?: web3.PublicKey
}

export const createRealmInstructionDiscriminator = 0

/**
 * Creates a _CreateRealm_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateRealm
 * @category generated
 */
export function createCreateRealmInstruction(
  accounts: CreateRealmInstructionAccounts,
  args: CreateRealmInstructionArgs,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = CreateRealmStruct.serialize({
    instructionDiscriminator: createRealmInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.governanceRealm,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.realmAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.communityTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.communityTokenHoldingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.councilTokenMint != null) {
    keys.push({
      pubkey: accounts.councilTokenMint,
      isWritable: false,
      isSigner: false,
    })
  }

  if (accounts.councilTokenHoldingAccount != null) {
    if (accounts.councilTokenMint == null) {
      throw new Error(
        "When providing 'councilTokenHoldingAccount' then 'accounts.councilTokenMint' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.councilTokenHoldingAccount,
      isWritable: true,
      isSigner: false,
    })
  }

  if (accounts.realmConfig != null) {
    if (
      accounts.councilTokenMint == null ||
      accounts.councilTokenHoldingAccount == null
    ) {
      throw new Error(
        "When providing 'realmConfig' then 'accounts.councilTokenMint', 'accounts.councilTokenHoldingAccount' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.realmConfig,
      isWritable: true,
      isSigner: false,
    })
  }

  if (accounts.communityVoterWeightAddinProgramId != null) {
    if (
      accounts.councilTokenMint == null ||
      accounts.councilTokenHoldingAccount == null ||
      accounts.realmConfig == null
    ) {
      throw new Error(
        "When providing 'communityVoterWeightAddinProgramId' then 'accounts.councilTokenMint', 'accounts.councilTokenHoldingAccount', 'accounts.realmConfig' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.communityVoterWeightAddinProgramId,
      isWritable: false,
      isSigner: false,
    })
  }

  if (accounts.maxCommunityVoterWeightAddinProgramId != null) {
    if (
      accounts.councilTokenMint == null ||
      accounts.councilTokenHoldingAccount == null ||
      accounts.realmConfig == null ||
      accounts.communityVoterWeightAddinProgramId == null
    ) {
      throw new Error(
        "When providing 'maxCommunityVoterWeightAddinProgramId' then 'accounts.councilTokenMint', 'accounts.councilTokenHoldingAccount', 'accounts.realmConfig', 'accounts.communityVoterWeightAddinProgramId' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.maxCommunityVoterWeightAddinProgramId,
      isWritable: false,
      isSigner: false,
    })
  }

  if (accounts.councilVoterWeightAddinProgramId != null) {
    if (
      accounts.councilTokenMint == null ||
      accounts.councilTokenHoldingAccount == null ||
      accounts.realmConfig == null ||
      accounts.communityVoterWeightAddinProgramId == null ||
      accounts.maxCommunityVoterWeightAddinProgramId == null
    ) {
      throw new Error(
        "When providing 'councilVoterWeightAddinProgramId' then 'accounts.councilTokenMint', 'accounts.councilTokenHoldingAccount', 'accounts.realmConfig', 'accounts.communityVoterWeightAddinProgramId', 'accounts.maxCommunityVoterWeightAddinProgramId' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.councilVoterWeightAddinProgramId,
      isWritable: false,
      isSigner: false,
    })
  }

  if (accounts.maxCouncilVoterWeightAddinProgramId != null) {
    if (
      accounts.councilTokenMint == null ||
      accounts.councilTokenHoldingAccount == null ||
      accounts.realmConfig == null ||
      accounts.communityVoterWeightAddinProgramId == null ||
      accounts.maxCommunityVoterWeightAddinProgramId == null ||
      accounts.councilVoterWeightAddinProgramId == null
    ) {
      throw new Error(
        "When providing 'maxCouncilVoterWeightAddinProgramId' then 'accounts.councilTokenMint', 'accounts.councilTokenHoldingAccount', 'accounts.realmConfig', 'accounts.communityVoterWeightAddinProgramId', 'accounts.maxCommunityVoterWeightAddinProgramId', 'accounts.councilVoterWeightAddinProgramId' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.maxCouncilVoterWeightAddinProgramId,
      isWritable: false,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
