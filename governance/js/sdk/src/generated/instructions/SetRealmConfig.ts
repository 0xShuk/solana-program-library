/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { RealmConfigArgs, realmConfigArgsBeet } from '../types/RealmConfigArgs'

/**
 * @category Instructions
 * @category SetRealmConfig
 * @category generated
 */
export type SetRealmConfigInstructionArgs = {
  configArgs: RealmConfigArgs
}
/**
 * @category Instructions
 * @category SetRealmConfig
 * @category generated
 */
export const SetRealmConfigStruct = new beet.FixableBeetArgsStruct<
  SetRealmConfigInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['configArgs', realmConfigArgsBeet],
  ],
  'SetRealmConfigInstructionArgs'
)
/**
  * Accounts required by the _SetRealmConfig_ instruction
 *
  * @property [_writable_] realmAccount  
* @property [**signer**] realmAuthority  
* @property [] councilTokenMint Council Token Mint - optional. 
        Note: In the current version it's only possible to remove council mint (set it to None)
        After setting council to None it won't be possible to withdraw the tokens from the Realm any longer. 
        If that's required then it must be done before executing this instruction 
* @property [_writable_] councilTokenHoldingAccount Optional unless council is used. seeds=['governance', realm, council_mint] 
* @property [_writable_] realmConfig RealmConfig account. seeds=['realm-config', realm] 
* @property [] communityVoterWeightAddinProgramId (optional) Optional Community Voter Weight Addin Program Id 
* @property [] maxCommunityVoterWeightAddinProgramId (optional) Optional Max Community Voter Weight Addin Program Id 
* @property [] councilVoterWeightAddinProgramId (optional) Optional Council Voter Weight Adding Program Id 
* @property [] maxCouncilVoterWeightAddinProgramId (optional) Optional Max Council Voter Weight Addin Program Id 
* @property [**signer**] payer (optional) Optional Payer. Required if RealmConfig doesn't exist and needs to be created  
  * @category Instructions
  * @category SetRealmConfig
  * @category generated
  */
export type SetRealmConfigInstructionAccounts = {
  realmAccount: web3.PublicKey
  realmAuthority: web3.PublicKey
  councilTokenMint: web3.PublicKey
  councilTokenHoldingAccount: web3.PublicKey
  systemProgram?: web3.PublicKey
  realmConfig: web3.PublicKey
  communityVoterWeightAddinProgramId?: web3.PublicKey
  maxCommunityVoterWeightAddinProgramId?: web3.PublicKey
  councilVoterWeightAddinProgramId?: web3.PublicKey
  maxCouncilVoterWeightAddinProgramId?: web3.PublicKey
  payer?: web3.PublicKey
}

export const setRealmConfigInstructionDiscriminator = 22

/**
 * Creates a _SetRealmConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetRealmConfig
 * @category generated
 */
export function createSetRealmConfigInstruction(
  accounts: SetRealmConfigInstructionAccounts,
  args: SetRealmConfigInstructionArgs,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = SetRealmConfigStruct.serialize({
    instructionDiscriminator: setRealmConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realmAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.realmAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.councilTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.councilTokenHoldingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.communityVoterWeightAddinProgramId != null) {
    keys.push({
      pubkey: accounts.communityVoterWeightAddinProgramId,
      isWritable: false,
      isSigner: false,
    })
  }

  if (accounts.maxCommunityVoterWeightAddinProgramId != null) {
    if (accounts.communityVoterWeightAddinProgramId == null) {
      throw new Error(
        "When providing 'maxCommunityVoterWeightAddinProgramId' then 'accounts.communityVoterWeightAddinProgramId' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.maxCommunityVoterWeightAddinProgramId,
      isWritable: false,
      isSigner: false,
    })
  }

  if (accounts.councilVoterWeightAddinProgramId != null) {
    if (
      accounts.communityVoterWeightAddinProgramId == null ||
      accounts.maxCommunityVoterWeightAddinProgramId == null
    ) {
      throw new Error(
        "When providing 'councilVoterWeightAddinProgramId' then 'accounts.communityVoterWeightAddinProgramId', 'accounts.maxCommunityVoterWeightAddinProgramId' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.councilVoterWeightAddinProgramId,
      isWritable: false,
      isSigner: false,
    })
  }

  if (accounts.maxCouncilVoterWeightAddinProgramId != null) {
    if (
      accounts.communityVoterWeightAddinProgramId == null ||
      accounts.maxCommunityVoterWeightAddinProgramId == null ||
      accounts.councilVoterWeightAddinProgramId == null
    ) {
      throw new Error(
        "When providing 'maxCouncilVoterWeightAddinProgramId' then 'accounts.communityVoterWeightAddinProgramId', 'accounts.maxCommunityVoterWeightAddinProgramId', 'accounts.councilVoterWeightAddinProgramId' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.maxCouncilVoterWeightAddinProgramId,
      isWritable: false,
      isSigner: false,
    })
  }

  if (accounts.payer != null) {
    if (
      accounts.communityVoterWeightAddinProgramId == null ||
      accounts.maxCommunityVoterWeightAddinProgramId == null ||
      accounts.councilVoterWeightAddinProgramId == null ||
      accounts.maxCouncilVoterWeightAddinProgramId == null
    ) {
      throw new Error(
        "When providing 'payer' then 'accounts.communityVoterWeightAddinProgramId', 'accounts.maxCommunityVoterWeightAddinProgramId', 'accounts.councilVoterWeightAddinProgramId', 'accounts.maxCouncilVoterWeightAddinProgramId' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
