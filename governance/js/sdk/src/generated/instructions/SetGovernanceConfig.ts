/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  GovernanceConfig,
  governanceConfigBeet,
} from '../types/GovernanceConfig'

/**
 * @category Instructions
 * @category SetGovernanceConfig
 * @category generated
 */
export type SetGovernanceConfigInstructionArgs = {
  config: GovernanceConfig
}
/**
 * @category Instructions
 * @category SetGovernanceConfig
 * @category generated
 */
export const SetGovernanceConfigStruct = new beet.FixableBeetArgsStruct<
  SetGovernanceConfigInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['config', governanceConfigBeet],
  ],
  'SetGovernanceConfigInstructionArgs'
)
/**
 * Accounts required by the _SetGovernanceConfig_ instruction
 *
 * @property [] realmAccount Realm account the governance_account belongs to
 * @property [_writable_, **signer**] theGovernanceAccountTheConfigIsFor
 * @category Instructions
 * @category SetGovernanceConfig
 * @category generated
 */
export type SetGovernanceConfigInstructionAccounts = {
  realmAccount: web3.PublicKey
  theGovernanceAccountTheConfigIsFor: web3.PublicKey
}

export const setGovernanceConfigInstructionDiscriminator = 19

/**
 * Creates a _SetGovernanceConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetGovernanceConfig
 * @category generated
 */
export function createSetGovernanceConfigInstruction(
  accounts: SetGovernanceConfigInstructionAccounts,
  args: SetGovernanceConfigInstructionArgs,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = SetGovernanceConfigStruct.serialize({
    instructionDiscriminator: setGovernanceConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realmAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.theGovernanceAccountTheConfigIsFor,
      isWritable: true,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
