/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RelinquishVote
 * @category generated
 */
export const RelinquishVoteStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>([['instructionDiscriminator', beet.u8]], 'RelinquishVoteInstructionArgs')
/**
  * Accounts required by the _RelinquishVote_ instruction
 *
  * @property [] realm  
* @property [] governance  
* @property [_writable_] proposal  
* @property [_writable_] tokenOwnerRecord TokenOwnerRecord account. PDA seeds: ['governance',realm, vote_governing_token_mint, governing_token_owner] 
* @property [_writable_] proposalVoteRecord Proposal VoteRecord account. PDA seeds: ['governance',proposal, token_owner_record] 
* @property [] governingTokenMint The Governing Token Mint which was used to cast the vote (vote_governing_token_mint) 
* @property [**signer**] governanceAuthority (optional)  
* @property [_writable_] beneficiaryAccount (optional) Optional Beneficiary account which would receive lamports when VoteRecord Account is disposed.
    It's required only when Proposal is still being voted on  
  * @category Instructions
  * @category RelinquishVote
  * @category generated
  */
export type RelinquishVoteInstructionAccounts = {
  realm: web3.PublicKey
  governance: web3.PublicKey
  proposal: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  proposalVoteRecord: web3.PublicKey
  governingTokenMint: web3.PublicKey
  governanceAuthority?: web3.PublicKey
  beneficiaryAccount?: web3.PublicKey
}

export const relinquishVoteInstructionDiscriminator = 15

/**
 * Creates a _RelinquishVote_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category RelinquishVote
 * @category generated
 */
export function createRelinquishVoteInstruction(
  accounts: RelinquishVoteInstructionAccounts,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = RelinquishVoteStruct.serialize({
    instructionDiscriminator: relinquishVoteInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realm,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalVoteRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenMint,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.governanceAuthority != null) {
    keys.push({
      pubkey: accounts.governanceAuthority,
      isWritable: false,
      isSigner: true,
    })
  }

  if (accounts.beneficiaryAccount != null) {
    if (accounts.governanceAuthority == null) {
      throw new Error(
        "When providing 'beneficiaryAccount' then 'accounts.governanceAuthority' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.beneficiaryAccount,
      isWritable: true,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
