/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * @category Instructions
 * @category RemoveSignatory
 * @category generated
 */
export type RemoveSignatoryInstructionArgs = {
  signatory: web3.PublicKey
}
/**
 * @category Instructions
 * @category RemoveSignatory
 * @category generated
 */
export const RemoveSignatoryStruct = new beet.BeetArgsStruct<
  RemoveSignatoryInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['signatory', beetSolana.publicKey],
  ],
  'RemoveSignatoryInstructionArgs'
)
/**
 * Accounts required by the _RemoveSignatory_ instruction
 *
 * @property [_writable_] proposalAccount
 * @property [] tokenOwnerRecord TokenOwnerRecord account of the Proposal owner
 * @property [**signer**] governanceAuthority Governance Authority (Token Owner or Governance Delegate)
 * @property [_writable_] signatoryRecordAccount Signatory Record Account
 * @property [_writable_] beneficiaryAccount Beneficiary Account which would receive lamports from the disposed Signatory Record Account
 * @category Instructions
 * @category RemoveSignatory
 * @category generated
 */
export type RemoveSignatoryInstructionAccounts = {
  proposalAccount: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  governanceAuthority: web3.PublicKey
  signatoryRecordAccount: web3.PublicKey
  beneficiaryAccount: web3.PublicKey
}

export const removeSignatoryInstructionDiscriminator = 8

/**
 * Creates a _RemoveSignatory_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RemoveSignatory
 * @category generated
 */
export function createRemoveSignatoryInstruction(
  accounts: RemoveSignatoryInstructionAccounts,
  args: RemoveSignatoryInstructionArgs,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = RemoveSignatoryStruct.serialize({
    instructionDiscriminator: removeSignatoryInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.proposalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.signatoryRecordAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.beneficiaryAccount,
      isWritable: true,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
