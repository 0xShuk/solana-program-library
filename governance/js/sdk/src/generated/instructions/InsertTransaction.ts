/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { InstructionData, instructionDataBeet } from '../types/InstructionData'

/**
 * @category Instructions
 * @category InsertTransaction
 * @category generated
 */
export type InsertTransactionInstructionArgs = {
  optionIndex: number
  index: number
  holdUpTime: number
  instructions: InstructionData[]
}
/**
 * @category Instructions
 * @category InsertTransaction
 * @category generated
 */
export const InsertTransactionStruct = new beet.FixableBeetArgsStruct<
  InsertTransactionInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['optionIndex', beet.u8],
    ['index', beet.u16],
    ['holdUpTime', beet.u32],
    ['instructions', beet.array(instructionDataBeet)],
  ],
  'InsertTransactionInstructionArgs'
)
/**
 * Accounts required by the _InsertTransaction_ instruction
 *
 * @property [] governanceAccount
 * @property [_writable_] proposalAccount
 * @property [] tokenOwnerRecord TokenOwnerRecord account of the Proposal owner
 * @property [**signer**] governanceAuthority Governance Authority (Token Owner or Governance Delegate)
 * @property [_writable_] proposalTransactionAccount ProposalTransaction, account. PDA seeds: ['governance', proposal, option_index, index]
 * @property [**signer**] payer
 * @category Instructions
 * @category InsertTransaction
 * @category generated
 */
export type InsertTransactionInstructionAccounts = {
  governanceAccount: web3.PublicKey
  proposalAccount: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  governanceAuthority: web3.PublicKey
  proposalTransactionAccount: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
}

export const insertTransactionInstructionDiscriminator = 9

/**
 * Creates a _InsertTransaction_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InsertTransaction
 * @category generated
 */
export function createInsertTransactionInstruction(
  accounts: InsertTransactionInstructionAccounts,
  args: InsertTransactionInstructionArgs,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = InsertTransactionStruct.serialize({
    instructionDiscriminator: insertTransactionInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.governanceAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.proposalTransactionAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
