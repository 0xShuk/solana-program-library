/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  GovernanceConfig,
  governanceConfigBeet,
} from '../types/GovernanceConfig'

/**
 * @category Instructions
 * @category CreateProgramGovernance
 * @category generated
 */
export type CreateProgramGovernanceInstructionArgs = {
  config: GovernanceConfig
  transferUpgradeAuthority: boolean
}
/**
 * @category Instructions
 * @category CreateProgramGovernance
 * @category generated
 */
export const CreateProgramGovernanceStruct = new beet.FixableBeetArgsStruct<
  CreateProgramGovernanceInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['config', governanceConfigBeet],
    ['transferUpgradeAuthority', beet.bool],
  ],
  'CreateProgramGovernanceInstructionArgs'
)
/**
 * Accounts required by the _CreateProgramGovernance_ instruction
 *
 * @property [] realmAccount Realm account the created Governance belongs to
 * @property [_writable_] programGovernanceAccount Program Governance account. seeds: ['program-governance', realm, governed_program]
 * @property [] governedProgram Program governed by this Governance account
 * @property [_writable_] programData Program Data account of the Program governed by this Governance account
 * @property [**signer**] currentUpgradeAuthority Current Upgrade Authority account of the Program governed by this Governance account
 * @property [] governingTokenOwnerRecord Governing TokenOwnerRecord account (Used only if not signed by RealmAuthority)
 * @property [**signer**] payer
 * @property [] bpfUpgradeableLoaderProgram bpf_upgradeable_loader_program program
 * @property [**signer**] governanceAuthority
 * @property [] realmConfig RealmConfig account. seeds=['realm-config', realm]
 * @property [] voterWeightRecord (optional) Optional Voter Weight Record
 * @category Instructions
 * @category CreateProgramGovernance
 * @category generated
 */
export type CreateProgramGovernanceInstructionAccounts = {
  realmAccount: web3.PublicKey
  programGovernanceAccount: web3.PublicKey
  governedProgram: web3.PublicKey
  programData: web3.PublicKey
  currentUpgradeAuthority: web3.PublicKey
  governingTokenOwnerRecord: web3.PublicKey
  payer: web3.PublicKey
  bpfUpgradeableLoaderProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  governanceAuthority: web3.PublicKey
  realmConfig: web3.PublicKey
  voterWeightRecord?: web3.PublicKey
}

export const createProgramGovernanceInstructionDiscriminator = 5

/**
 * Creates a _CreateProgramGovernance_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateProgramGovernance
 * @category generated
 */
export function createCreateProgramGovernanceInstruction(
  accounts: CreateProgramGovernanceInstructionAccounts,
  args: CreateProgramGovernanceInstructionArgs,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = CreateProgramGovernanceStruct.serialize({
    instructionDiscriminator: createProgramGovernanceInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realmAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.programGovernanceAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governedProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.programData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.currentUpgradeAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.governingTokenOwnerRecord,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.bpfUpgradeableLoaderProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.voterWeightRecord != null) {
    keys.push({
      pubkey: accounts.voterWeightRecord,
      isWritable: false,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
