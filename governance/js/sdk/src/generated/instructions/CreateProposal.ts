/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { VoteType, voteTypeBeet } from '../types/VoteType'

/**
 * @category Instructions
 * @category CreateProposal
 * @category generated
 */
export type CreateProposalInstructionArgs = {
  name: string
  descriptionLink: string
  voteType: VoteType
  options: string[]
  useDenyOption: boolean
}
/**
 * @category Instructions
 * @category CreateProposal
 * @category generated
 */
export const CreateProposalStruct = new beet.FixableBeetArgsStruct<
  CreateProposalInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['name', beet.utf8String],
    ['descriptionLink', beet.utf8String],
    ['voteType', voteTypeBeet],
    ['options', beet.array(beet.utf8String)],
    ['useDenyOption', beet.bool],
  ],
  'CreateProposalInstructionArgs'
)
/**
 * Accounts required by the _CreateProposal_ instruction
 *
 * @property [] realmAccount Realm account the created Proposal belongs to
 * @property [_writable_] proposalAccount Proposal account. PDA seeds ['governance',governance, governing_token_mint, proposal_index]
 * @property [_writable_] governanceAccount Governance account
 * @property [_writable_] tokenOwnerRecord TokenOwnerRecord account of the Proposal owner
 * @property [] governingTokenMint Token Mint the Proposal is created for
 * @property [**signer**] governanceAuthority Governance Authority (Token Owner or Governance Delegate)
 * @property [**signer**] payer
 * @property [] realmConfig RealmConfig account. PDA seeds: ['realm-config', realm]
 * @property [] voterWeightRecord (optional) Optional Voter Weight Record
 * @category Instructions
 * @category CreateProposal
 * @category generated
 */
export type CreateProposalInstructionAccounts = {
  realmAccount: web3.PublicKey
  proposalAccount: web3.PublicKey
  governanceAccount: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  governingTokenMint: web3.PublicKey
  governanceAuthority: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  realmConfig: web3.PublicKey
  voterWeightRecord?: web3.PublicKey
}

export const createProposalInstructionDiscriminator = 6

/**
 * Creates a _CreateProposal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateProposal
 * @category generated
 */
export function createCreateProposalInstruction(
  accounts: CreateProposalInstructionAccounts,
  args: CreateProposalInstructionArgs,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = CreateProposalStruct.serialize({
    instructionDiscriminator: createProposalInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realmAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.voterWeightRecord != null) {
    keys.push({
      pubkey: accounts.voterWeightRecord,
      isWritable: false,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
