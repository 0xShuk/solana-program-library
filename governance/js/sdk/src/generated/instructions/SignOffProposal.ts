/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SignOffProposal
 * @category generated
 */
export const SignOffProposalStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>([['instructionDiscriminator', beet.u8]], 'SignOffProposalInstructionArgs')
/**
  * Accounts required by the _SignOffProposal_ instruction
 *
  * @property [_writable_] realmAccount  
* @property [_writable_] governanceAccount  
* @property [_writable_] proposalAccount  
* @property [**signer**] signatoryAccount Signatory account signing off the Proposal.
    Or Proposal owner if the owner hasn't appointed any signatories 
* @property [] tokenOwnerRecord TokenOwnerRecord for the Proposal owner, required when the owner signs off the Proposal.
    Or `[writable]` SignatoryRecord account, required when non owner sings off the Proposal  
  * @category Instructions
  * @category SignOffProposal
  * @category generated
  */
export type SignOffProposalInstructionAccounts = {
  realmAccount: web3.PublicKey
  governanceAccount: web3.PublicKey
  proposalAccount: web3.PublicKey
  signatoryAccount: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
}

export const signOffProposalInstructionDiscriminator = 12

/**
 * Creates a _SignOffProposal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category SignOffProposal
 * @category generated
 */
export function createSignOffProposalInstruction(
  accounts: SignOffProposalInstructionAccounts,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = SignOffProposalStruct.serialize({
    instructionDiscriminator: signOffProposalInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realmAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.signatoryAccount,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
