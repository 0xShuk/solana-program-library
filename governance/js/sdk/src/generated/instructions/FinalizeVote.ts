/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category FinalizeVote
 * @category generated
 */
export const FinalizeVoteStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>([['instructionDiscriminator', beet.u8]], 'FinalizeVoteInstructionArgs')
/**
 * Accounts required by the _FinalizeVote_ instruction
 *
 * @property [_writable_] realmAccount
 * @property [_writable_] governanceAccount
 * @property [_writable_] proposalAccount
 * @property [_writable_] tokenOwnerRecord TokenOwnerRecord of the Proposal owner
 * @property [] governingTokenMint
 * @property [] realmConfig RealmConfig account. PDA seeds: ['realm-config', realm]
 * @property [] maxVoterWeightRecord (optional) Optional Max Voter Weight Record
 * @category Instructions
 * @category FinalizeVote
 * @category generated
 */
export type FinalizeVoteInstructionAccounts = {
  realmAccount: web3.PublicKey
  governanceAccount: web3.PublicKey
  proposalAccount: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  governingTokenMint: web3.PublicKey
  realmConfig: web3.PublicKey
  maxVoterWeightRecord?: web3.PublicKey
}

export const finalizeVoteInstructionDiscriminator = 14

/**
 * Creates a _FinalizeVote_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category FinalizeVote
 * @category generated
 */
export function createFinalizeVoteInstruction(
  accounts: FinalizeVoteInstructionAccounts,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = FinalizeVoteStruct.serialize({
    instructionDiscriminator: finalizeVoteInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realmAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.maxVoterWeightRecord != null) {
    keys.push({
      pubkey: accounts.maxVoterWeightRecord,
      isWritable: false,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
