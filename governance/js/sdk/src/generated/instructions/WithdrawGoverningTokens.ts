/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category WithdrawGoverningTokens
 * @category generated
 */
export const WithdrawGoverningTokensStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>(
  [['instructionDiscriminator', beet.u8]],
  'WithdrawGoverningTokensInstructionArgs'
)
/**
 * Accounts required by the _WithdrawGoverningTokens_ instruction
 *
 * @property [] realmAccount
 * @property [_writable_] governingTokenHoldingAccount seeds=['governance', realm, governing_token_mint]
 * @property [_writable_] governingTokenDestinationAccount All tokens will be transferred to this account
 * @property [**signer**] governingTokenOwnerAccount
 * @property [_writable_] tokenOwnerRecord seeds=['governance',realm, governing_token_mint, governing_token_owner]
 * @property [] realmConfigAccount seeds=['realm-config', realm]
 * @category Instructions
 * @category WithdrawGoverningTokens
 * @category generated
 */
export type WithdrawGoverningTokensInstructionAccounts = {
  realmAccount: web3.PublicKey
  governingTokenHoldingAccount: web3.PublicKey
  governingTokenDestinationAccount: web3.PublicKey
  governingTokenOwnerAccount: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  tokenProgram?: web3.PublicKey
  realmConfigAccount: web3.PublicKey
}

export const withdrawGoverningTokensInstructionDiscriminator = 2

/**
 * Creates a _WithdrawGoverningTokens_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category WithdrawGoverningTokens
 * @category generated
 */
export function createWithdrawGoverningTokensInstruction(
  accounts: WithdrawGoverningTokensInstructionAccounts,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = WithdrawGoverningTokensStruct.serialize({
    instructionDiscriminator: withdrawGoverningTokensInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realmAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenHoldingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenDestinationAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenOwnerAccount,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfigAccount,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
