/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RevokeGoverningTokens
 * @category generated
 */
export type RevokeGoverningTokensInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category RevokeGoverningTokens
 * @category generated
 */
export const RevokeGoverningTokensStruct = new beet.BeetArgsStruct<
  RevokeGoverningTokensInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['amount', beet.u64],
  ],
  'RevokeGoverningTokensInstructionArgs'
)
/**
 * Accounts required by the _RevokeGoverningTokens_ instruction
 *
 * @property [] realmAccount
 * @property [_writable_] governingTokenHoldingAccount seeds=['governance', realm, governing_token_mint]
 * @property [_writable_] tokenOwnerRecord seeds=['governance', realm, governing_token_mint, governing_token_owner]
 * @property [_writable_] governingTokenMint
 * @property [**signer**] governingTokenMintAuthority GoverningTokenMint mint_authority
 * @property [] realmConfigAccount seeds=['realm-config', realm]
 * @category Instructions
 * @category RevokeGoverningTokens
 * @category generated
 */
export type RevokeGoverningTokensInstructionAccounts = {
  realmAccount: web3.PublicKey
  governingTokenHoldingAccount: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  governingTokenMint: web3.PublicKey
  governingTokenMintAuthority: web3.PublicKey
  realmConfigAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
}

export const revokeGoverningTokensInstructionDiscriminator = 26

/**
 * Creates a _RevokeGoverningTokens_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RevokeGoverningTokens
 * @category generated
 */
export function createRevokeGoverningTokensInstruction(
  accounts: RevokeGoverningTokensInstructionAccounts,
  args: RevokeGoverningTokensInstructionArgs,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = RevokeGoverningTokensStruct.serialize({
    instructionDiscriminator: revokeGoverningTokensInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realmAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenHoldingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenMintAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.realmConfigAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
