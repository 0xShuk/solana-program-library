/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateTokenOwnerRecord
 * @category generated
 */
export const CreateTokenOwnerRecordStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>(
  [['instructionDiscriminator', beet.u8]],
  'CreateTokenOwnerRecordInstructionArgs'
)
/**
 * Accounts required by the _CreateTokenOwnerRecord_ instruction
 *
 * @property [] realmAccount
 * @property [] governingTokenOwnerAccount
 * @property [_writable_] tokenOwnerRecord seeds=['governance', realm, governing_token_mint, governing_token_owner]
 * @property [] governingTokenMint
 * @property [**signer**] payer
 * @category Instructions
 * @category CreateTokenOwnerRecord
 * @category generated
 */
export type CreateTokenOwnerRecordInstructionAccounts = {
  realmAccount: web3.PublicKey
  governingTokenOwnerAccount: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  governingTokenMint: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const createTokenOwnerRecordInstructionDiscriminator = 23

/**
 * Creates a _CreateTokenOwnerRecord_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CreateTokenOwnerRecord
 * @category generated
 */
export function createCreateTokenOwnerRecordInstruction(
  accounts: CreateTokenOwnerRecordInstructionAccounts,
  programId = new web3.PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw')
) {
  const [data] = CreateTokenOwnerRecordStruct.serialize({
    instructionDiscriminator: createTokenOwnerRecordInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realmAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenOwnerAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governingTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
