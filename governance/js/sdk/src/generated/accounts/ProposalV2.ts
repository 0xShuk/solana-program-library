/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  GovernanceAccountType,
  governanceAccountTypeBeet,
} from '../types/GovernanceAccountType'
import { ProposalState, proposalStateBeet } from '../types/ProposalState'
import { VoteType, voteTypeBeet } from '../types/VoteType'
import { ProposalOption, proposalOptionBeet } from '../types/ProposalOption'
import {
  InstructionExecutionFlags,
  instructionExecutionFlagsBeet,
} from '../types/InstructionExecutionFlags'
import { VoteThreshold, voteThresholdBeet } from '../types/VoteThreshold'

/**
 * Arguments used to create {@link ProposalV2}
 * @category Accounts
 * @category generated
 */
export type ProposalV2Args = {
  accountType: GovernanceAccountType
  governance: web3.PublicKey
  governingTokenMint: web3.PublicKey
  state: ProposalState
  tokenOwnerRecord: web3.PublicKey
  signatoriesCount: number
  signatoriesSignedOffCount: number
  voteType: VoteType
  options: ProposalOption[]
  denyVoteWeight: beet.COption<beet.bignum>
  reserved1: number
  abstainVoteWeight: beet.COption<beet.bignum>
  startVotingAt: beet.COption<beet.bignum>
  draftAt: beet.bignum
  signingOffAt: beet.COption<beet.bignum>
  votingAt: beet.COption<beet.bignum>
  votingAtSlot: beet.COption<beet.bignum>
  votingCompletedAt: beet.COption<beet.bignum>
  executingAt: beet.COption<beet.bignum>
  closedAt: beet.COption<beet.bignum>
  executionFlags: InstructionExecutionFlags
  maxVoteWeight: beet.COption<beet.bignum>
  maxVotingTime: beet.COption<number>
  voteThreshold: beet.COption<VoteThreshold>
  reserved: number[] /* size: 64 */
  name: string
  descriptionLink: string
  vetoVoteWeight: beet.bignum
}
/**
 * Holds the data for the {@link ProposalV2} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ProposalV2 implements ProposalV2Args {
  private constructor(
    readonly accountType: GovernanceAccountType,
    readonly governance: web3.PublicKey,
    readonly governingTokenMint: web3.PublicKey,
    readonly state: ProposalState,
    readonly tokenOwnerRecord: web3.PublicKey,
    readonly signatoriesCount: number,
    readonly signatoriesSignedOffCount: number,
    readonly voteType: VoteType,
    readonly options: ProposalOption[],
    readonly denyVoteWeight: beet.COption<beet.bignum>,
    readonly reserved1: number,
    readonly abstainVoteWeight: beet.COption<beet.bignum>,
    readonly startVotingAt: beet.COption<beet.bignum>,
    readonly draftAt: beet.bignum,
    readonly signingOffAt: beet.COption<beet.bignum>,
    readonly votingAt: beet.COption<beet.bignum>,
    readonly votingAtSlot: beet.COption<beet.bignum>,
    readonly votingCompletedAt: beet.COption<beet.bignum>,
    readonly executingAt: beet.COption<beet.bignum>,
    readonly closedAt: beet.COption<beet.bignum>,
    readonly executionFlags: InstructionExecutionFlags,
    readonly maxVoteWeight: beet.COption<beet.bignum>,
    readonly maxVotingTime: beet.COption<number>,
    readonly voteThreshold: beet.COption<VoteThreshold>,
    readonly reserved: number[] /* size: 64 */,
    readonly name: string,
    readonly descriptionLink: string,
    readonly vetoVoteWeight: beet.bignum
  ) {}

  /**
   * Creates a {@link ProposalV2} instance from the provided args.
   */
  static fromArgs(args: ProposalV2Args) {
    return new ProposalV2(
      args.accountType,
      args.governance,
      args.governingTokenMint,
      args.state,
      args.tokenOwnerRecord,
      args.signatoriesCount,
      args.signatoriesSignedOffCount,
      args.voteType,
      args.options,
      args.denyVoteWeight,
      args.reserved1,
      args.abstainVoteWeight,
      args.startVotingAt,
      args.draftAt,
      args.signingOffAt,
      args.votingAt,
      args.votingAtSlot,
      args.votingCompletedAt,
      args.executingAt,
      args.closedAt,
      args.executionFlags,
      args.maxVoteWeight,
      args.maxVotingTime,
      args.voteThreshold,
      args.reserved,
      args.name,
      args.descriptionLink,
      args.vetoVoteWeight
    )
  }

  /**
   * Deserializes the {@link ProposalV2} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [ProposalV2, number] {
    return ProposalV2.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ProposalV2} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<ProposalV2> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find ProposalV2 account at ${address}`)
    }
    return ProposalV2.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, proposalV2Beet)
  }

  /**
   * Deserializes the {@link ProposalV2} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ProposalV2, number] {
    return proposalV2Beet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link ProposalV2} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return proposalV2Beet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ProposalV2} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ProposalV2Args) {
    const instance = ProposalV2.fromArgs(args)
    return proposalV2Beet.toFixedFromValue(instance).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ProposalV2} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ProposalV2Args,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      ProposalV2.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link ProposalV2} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType:
        'GovernanceAccountType.' + GovernanceAccountType[this.accountType],
      governance: this.governance.toBase58(),
      governingTokenMint: this.governingTokenMint.toBase58(),
      state: 'ProposalState.' + ProposalState[this.state],
      tokenOwnerRecord: this.tokenOwnerRecord.toBase58(),
      signatoriesCount: this.signatoriesCount,
      signatoriesSignedOffCount: this.signatoriesSignedOffCount,
      voteType: this.voteType.__kind,
      options: this.options,
      denyVoteWeight: this.denyVoteWeight,
      reserved1: this.reserved1,
      abstainVoteWeight: this.abstainVoteWeight,
      startVotingAt: this.startVotingAt,
      draftAt: this.draftAt,
      signingOffAt: this.signingOffAt,
      votingAt: this.votingAt,
      votingAtSlot: this.votingAtSlot,
      votingCompletedAt: this.votingCompletedAt,
      executingAt: this.executingAt,
      closedAt: this.closedAt,
      executionFlags:
        'InstructionExecutionFlags.' +
        InstructionExecutionFlags[this.executionFlags],
      maxVoteWeight: this.maxVoteWeight,
      maxVotingTime: this.maxVotingTime,
      voteThreshold: this.voteThreshold,
      reserved: this.reserved,
      name: this.name,
      descriptionLink: this.descriptionLink,
      vetoVoteWeight: (() => {
        const x = <{ toNumber: () => number }>this.vetoVoteWeight
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const proposalV2Beet = new beet.FixableBeetStruct<
  ProposalV2,
  ProposalV2Args
>(
  [
    ['accountType', governanceAccountTypeBeet],
    ['governance', beetSolana.publicKey],
    ['governingTokenMint', beetSolana.publicKey],
    ['state', proposalStateBeet],
    ['tokenOwnerRecord', beetSolana.publicKey],
    ['signatoriesCount', beet.u8],
    ['signatoriesSignedOffCount', beet.u8],
    ['voteType', voteTypeBeet],
    ['options', beet.array(proposalOptionBeet)],
    ['denyVoteWeight', beet.coption(beet.u64)],
    ['reserved1', beet.u8],
    ['abstainVoteWeight', beet.coption(beet.u64)],
    ['startVotingAt', beet.coption(beet.i64)],
    ['draftAt', beet.i64],
    ['signingOffAt', beet.coption(beet.i64)],
    ['votingAt', beet.coption(beet.i64)],
    ['votingAtSlot', beet.coption(beet.u64)],
    ['votingCompletedAt', beet.coption(beet.i64)],
    ['executingAt', beet.coption(beet.i64)],
    ['closedAt', beet.coption(beet.i64)],
    ['executionFlags', instructionExecutionFlagsBeet],
    ['maxVoteWeight', beet.coption(beet.u64)],
    ['maxVotingTime', beet.coption(beet.u32)],
    ['voteThreshold', beet.coption(voteThresholdBeet)],
    ['reserved', beet.uniformFixedSizeArray(beet.u8, 64)],
    ['name', beet.utf8String],
    ['descriptionLink', beet.utf8String],
    ['vetoVoteWeight', beet.u64],
  ],
  ProposalV2.fromArgs,
  'ProposalV2'
)
