/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import {
  GovernanceAccountType,
  governanceAccountTypeBeet,
} from '../types/GovernanceAccountType'

/**
 * Arguments used to create {@link SignatoryRecordV1}
 * @category Accounts
 * @category generated
 */
export type SignatoryRecordV1Args = {
  accountType: GovernanceAccountType
  proposal: web3.PublicKey
  signatory: web3.PublicKey
  signedOff: boolean
}
/**
 * Holds the data for the {@link SignatoryRecordV1} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class SignatoryRecordV1 implements SignatoryRecordV1Args {
  private constructor(
    readonly accountType: GovernanceAccountType,
    readonly proposal: web3.PublicKey,
    readonly signatory: web3.PublicKey,
    readonly signedOff: boolean
  ) {}

  /**
   * Creates a {@link SignatoryRecordV1} instance from the provided args.
   */
  static fromArgs(args: SignatoryRecordV1Args) {
    return new SignatoryRecordV1(
      args.accountType,
      args.proposal,
      args.signatory,
      args.signedOff
    )
  }

  /**
   * Deserializes the {@link SignatoryRecordV1} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [SignatoryRecordV1, number] {
    return SignatoryRecordV1.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link SignatoryRecordV1} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<SignatoryRecordV1> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find SignatoryRecordV1 account at ${address}`)
    }
    return SignatoryRecordV1.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, signatoryRecordV1Beet)
  }

  /**
   * Deserializes the {@link SignatoryRecordV1} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [SignatoryRecordV1, number] {
    return signatoryRecordV1Beet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link SignatoryRecordV1} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return signatoryRecordV1Beet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link SignatoryRecordV1}
   */
  static get byteSize() {
    return signatoryRecordV1Beet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link SignatoryRecordV1} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      SignatoryRecordV1.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link SignatoryRecordV1} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === SignatoryRecordV1.byteSize
  }

  /**
   * Returns a readable version of {@link SignatoryRecordV1} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType:
        'GovernanceAccountType.' + GovernanceAccountType[this.accountType],
      proposal: this.proposal.toBase58(),
      signatory: this.signatory.toBase58(),
      signedOff: this.signedOff,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const signatoryRecordV1Beet = new beet.BeetStruct<
  SignatoryRecordV1,
  SignatoryRecordV1Args
>(
  [
    ['accountType', governanceAccountTypeBeet],
    ['proposal', beetSolana.publicKey],
    ['signatory', beetSolana.publicKey],
    ['signedOff', beet.bool],
  ],
  SignatoryRecordV1.fromArgs,
  'SignatoryRecordV1'
)
