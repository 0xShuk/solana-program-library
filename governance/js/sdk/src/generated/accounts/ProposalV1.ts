/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  GovernanceAccountType,
  governanceAccountTypeBeet,
} from '../types/GovernanceAccountType'
import { ProposalState, proposalStateBeet } from '../types/ProposalState'
import {
  InstructionExecutionFlags,
  instructionExecutionFlagsBeet,
} from '../types/InstructionExecutionFlags'
import { VoteThreshold, voteThresholdBeet } from '../types/VoteThreshold'

/**
 * Arguments used to create {@link ProposalV1}
 * @category Accounts
 * @category generated
 */
export type ProposalV1Args = {
  accountType: GovernanceAccountType
  governance: web3.PublicKey
  governingTokenMint: web3.PublicKey
  state: ProposalState
  tokenOwnerRecord: web3.PublicKey
  signatoriesCount: number
  signatoriesSignedOffCount: number
  yesVotesCount: beet.bignum
  noVotesCount: beet.bignum
  instructionsExecutedCount: number
  instructionsCount: number
  instructionsNextIndex: number
  draftAt: beet.bignum
  signingOffAt: beet.COption<beet.bignum>
  votingAt: beet.COption<beet.bignum>
  votingAtSlot: beet.COption<beet.bignum>
  votingCompletedAt: beet.COption<beet.bignum>
  executingAt: beet.COption<beet.bignum>
  closedAt: beet.COption<beet.bignum>
  executionFlags: InstructionExecutionFlags
  maxVoteWeight: beet.COption<beet.bignum>
  voteThreshold: beet.COption<VoteThreshold>
  name: string
  descriptionLink: string
}
/**
 * Holds the data for the {@link ProposalV1} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ProposalV1 implements ProposalV1Args {
  private constructor(
    readonly accountType: GovernanceAccountType,
    readonly governance: web3.PublicKey,
    readonly governingTokenMint: web3.PublicKey,
    readonly state: ProposalState,
    readonly tokenOwnerRecord: web3.PublicKey,
    readonly signatoriesCount: number,
    readonly signatoriesSignedOffCount: number,
    readonly yesVotesCount: beet.bignum,
    readonly noVotesCount: beet.bignum,
    readonly instructionsExecutedCount: number,
    readonly instructionsCount: number,
    readonly instructionsNextIndex: number,
    readonly draftAt: beet.bignum,
    readonly signingOffAt: beet.COption<beet.bignum>,
    readonly votingAt: beet.COption<beet.bignum>,
    readonly votingAtSlot: beet.COption<beet.bignum>,
    readonly votingCompletedAt: beet.COption<beet.bignum>,
    readonly executingAt: beet.COption<beet.bignum>,
    readonly closedAt: beet.COption<beet.bignum>,
    readonly executionFlags: InstructionExecutionFlags,
    readonly maxVoteWeight: beet.COption<beet.bignum>,
    readonly voteThreshold: beet.COption<VoteThreshold>,
    readonly name: string,
    readonly descriptionLink: string
  ) {}

  /**
   * Creates a {@link ProposalV1} instance from the provided args.
   */
  static fromArgs(args: ProposalV1Args) {
    return new ProposalV1(
      args.accountType,
      args.governance,
      args.governingTokenMint,
      args.state,
      args.tokenOwnerRecord,
      args.signatoriesCount,
      args.signatoriesSignedOffCount,
      args.yesVotesCount,
      args.noVotesCount,
      args.instructionsExecutedCount,
      args.instructionsCount,
      args.instructionsNextIndex,
      args.draftAt,
      args.signingOffAt,
      args.votingAt,
      args.votingAtSlot,
      args.votingCompletedAt,
      args.executingAt,
      args.closedAt,
      args.executionFlags,
      args.maxVoteWeight,
      args.voteThreshold,
      args.name,
      args.descriptionLink
    )
  }

  /**
   * Deserializes the {@link ProposalV1} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [ProposalV1, number] {
    return ProposalV1.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ProposalV1} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<ProposalV1> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find ProposalV1 account at ${address}`)
    }
    return ProposalV1.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, proposalV1Beet)
  }

  /**
   * Deserializes the {@link ProposalV1} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ProposalV1, number] {
    return proposalV1Beet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link ProposalV1} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return proposalV1Beet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ProposalV1} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ProposalV1Args) {
    const instance = ProposalV1.fromArgs(args)
    return proposalV1Beet.toFixedFromValue(instance).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ProposalV1} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ProposalV1Args,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      ProposalV1.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link ProposalV1} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType:
        'GovernanceAccountType.' + GovernanceAccountType[this.accountType],
      governance: this.governance.toBase58(),
      governingTokenMint: this.governingTokenMint.toBase58(),
      state: 'ProposalState.' + ProposalState[this.state],
      tokenOwnerRecord: this.tokenOwnerRecord.toBase58(),
      signatoriesCount: this.signatoriesCount,
      signatoriesSignedOffCount: this.signatoriesSignedOffCount,
      yesVotesCount: (() => {
        const x = <{ toNumber: () => number }>this.yesVotesCount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      noVotesCount: (() => {
        const x = <{ toNumber: () => number }>this.noVotesCount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      instructionsExecutedCount: this.instructionsExecutedCount,
      instructionsCount: this.instructionsCount,
      instructionsNextIndex: this.instructionsNextIndex,
      draftAt: this.draftAt,
      signingOffAt: this.signingOffAt,
      votingAt: this.votingAt,
      votingAtSlot: this.votingAtSlot,
      votingCompletedAt: this.votingCompletedAt,
      executingAt: this.executingAt,
      closedAt: this.closedAt,
      executionFlags:
        'InstructionExecutionFlags.' +
        InstructionExecutionFlags[this.executionFlags],
      maxVoteWeight: this.maxVoteWeight,
      voteThreshold: this.voteThreshold,
      name: this.name,
      descriptionLink: this.descriptionLink,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const proposalV1Beet = new beet.FixableBeetStruct<
  ProposalV1,
  ProposalV1Args
>(
  [
    ['accountType', governanceAccountTypeBeet],
    ['governance', beetSolana.publicKey],
    ['governingTokenMint', beetSolana.publicKey],
    ['state', proposalStateBeet],
    ['tokenOwnerRecord', beetSolana.publicKey],
    ['signatoriesCount', beet.u8],
    ['signatoriesSignedOffCount', beet.u8],
    ['yesVotesCount', beet.u64],
    ['noVotesCount', beet.u64],
    ['instructionsExecutedCount', beet.u16],
    ['instructionsCount', beet.u16],
    ['instructionsNextIndex', beet.u16],
    ['draftAt', beet.i64],
    ['signingOffAt', beet.coption(beet.i64)],
    ['votingAt', beet.coption(beet.i64)],
    ['votingAtSlot', beet.coption(beet.u64)],
    ['votingCompletedAt', beet.coption(beet.i64)],
    ['executingAt', beet.coption(beet.i64)],
    ['closedAt', beet.coption(beet.i64)],
    ['executionFlags', instructionExecutionFlagsBeet],
    ['maxVoteWeight', beet.coption(beet.u64)],
    ['voteThreshold', beet.coption(voteThresholdBeet)],
    ['name', beet.utf8String],
    ['descriptionLink', beet.utf8String],
  ],
  ProposalV1.fromArgs,
  'ProposalV1'
)
