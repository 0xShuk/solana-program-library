/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import {
  GovernanceAccountType,
  governanceAccountTypeBeet,
} from '../types/GovernanceAccountType'
import {
  GovernanceConfig,
  governanceConfigBeet,
} from '../types/GovernanceConfig'

/**
 * Arguments used to create {@link GovernanceV2}
 * @category Accounts
 * @category generated
 */
export type GovernanceV2Args = {
  accountType: GovernanceAccountType
  realm: web3.PublicKey
  governedAccount: web3.PublicKey
  proposalsCount: number
  config: GovernanceConfig
  reserved: number[] /* size: 3 */
  votingProposalCount: number
  reservedV2: number[] /* size: 128 */
}
/**
 * Holds the data for the {@link GovernanceV2} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class GovernanceV2 implements GovernanceV2Args {
  private constructor(
    readonly accountType: GovernanceAccountType,
    readonly realm: web3.PublicKey,
    readonly governedAccount: web3.PublicKey,
    readonly proposalsCount: number,
    readonly config: GovernanceConfig,
    readonly reserved: number[] /* size: 3 */,
    readonly votingProposalCount: number,
    readonly reservedV2: number[] /* size: 128 */
  ) {}

  /**
   * Creates a {@link GovernanceV2} instance from the provided args.
   */
  static fromArgs(args: GovernanceV2Args) {
    return new GovernanceV2(
      args.accountType,
      args.realm,
      args.governedAccount,
      args.proposalsCount,
      args.config,
      args.reserved,
      args.votingProposalCount,
      args.reservedV2
    )
  }

  /**
   * Deserializes the {@link GovernanceV2} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [GovernanceV2, number] {
    return GovernanceV2.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link GovernanceV2} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<GovernanceV2> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find GovernanceV2 account at ${address}`)
    }
    return GovernanceV2.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, governanceV2Beet)
  }

  /**
   * Deserializes the {@link GovernanceV2} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [GovernanceV2, number] {
    return governanceV2Beet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link GovernanceV2} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return governanceV2Beet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link GovernanceV2} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: GovernanceV2Args) {
    const instance = GovernanceV2.fromArgs(args)
    return governanceV2Beet.toFixedFromValue(instance).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link GovernanceV2} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: GovernanceV2Args,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      GovernanceV2.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link GovernanceV2} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType:
        'GovernanceAccountType.' + GovernanceAccountType[this.accountType],
      realm: this.realm.toBase58(),
      governedAccount: this.governedAccount.toBase58(),
      proposalsCount: this.proposalsCount,
      config: this.config,
      reserved: this.reserved,
      votingProposalCount: this.votingProposalCount,
      reservedV2: this.reservedV2,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const governanceV2Beet = new beet.FixableBeetStruct<
  GovernanceV2,
  GovernanceV2Args
>(
  [
    ['accountType', governanceAccountTypeBeet],
    ['realm', beetSolana.publicKey],
    ['governedAccount', beetSolana.publicKey],
    ['proposalsCount', beet.u32],
    ['config', governanceConfigBeet],
    ['reserved', beet.uniformFixedSizeArray(beet.u8, 3)],
    ['votingProposalCount', beet.u16],
    ['reservedV2', beet.uniformFixedSizeArray(beet.u8, 128)],
  ],
  GovernanceV2.fromArgs,
  'GovernanceV2'
)
