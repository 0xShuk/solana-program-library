/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidInstruction: 'Invalid instruction passed to program'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInstructionError extends Error {
  readonly code: number = 0x1f4
  readonly name: string = 'InvalidInstruction'
  constructor() {
    super('Invalid instruction passed to program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1f4, () => new InvalidInstructionError())
createErrorFromNameLookup.set(
  'InvalidInstruction',
  () => new InvalidInstructionError()
)

/**
 * RealmAlreadyExists: 'Realm with the given name and governing mints already exists'
 *
 * @category Errors
 * @category generated
 */
export class RealmAlreadyExistsError extends Error {
  readonly code: number = 0x1f5
  readonly name: string = 'RealmAlreadyExists'
  constructor() {
    super('Realm with the given name and governing mints already exists')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RealmAlreadyExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1f5, () => new RealmAlreadyExistsError())
createErrorFromNameLookup.set(
  'RealmAlreadyExists',
  () => new RealmAlreadyExistsError()
)

/**
 * InvalidRealm: 'Invalid realm'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRealmError extends Error {
  readonly code: number = 0x1f6
  readonly name: string = 'InvalidRealm'
  constructor() {
    super('Invalid realm')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRealmError)
    }
  }
}

createErrorFromCodeLookup.set(0x1f6, () => new InvalidRealmError())
createErrorFromNameLookup.set('InvalidRealm', () => new InvalidRealmError())

/**
 * InvalidGoverningTokenMint: 'Invalid Governing Token Mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGoverningTokenMintError extends Error {
  readonly code: number = 0x1f7
  readonly name: string = 'InvalidGoverningTokenMint'
  constructor() {
    super('Invalid Governing Token Mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGoverningTokenMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1f7, () => new InvalidGoverningTokenMintError())
createErrorFromNameLookup.set(
  'InvalidGoverningTokenMint',
  () => new InvalidGoverningTokenMintError()
)

/**
 * GoverningTokenOwnerMustSign: 'Governing Token Owner must sign transaction'
 *
 * @category Errors
 * @category generated
 */
export class GoverningTokenOwnerMustSignError extends Error {
  readonly code: number = 0x1f8
  readonly name: string = 'GoverningTokenOwnerMustSign'
  constructor() {
    super('Governing Token Owner must sign transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, GoverningTokenOwnerMustSignError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1f8,
  () => new GoverningTokenOwnerMustSignError()
)
createErrorFromNameLookup.set(
  'GoverningTokenOwnerMustSign',
  () => new GoverningTokenOwnerMustSignError()
)

/**
 * GoverningTokenOwnerOrDelegateMustSign: 'Governing Token Owner or Delegate  must sign transaction'
 *
 * @category Errors
 * @category generated
 */
export class GoverningTokenOwnerOrDelegateMustSignError extends Error {
  readonly code: number = 0x1f9
  readonly name: string = 'GoverningTokenOwnerOrDelegateMustSign'
  constructor() {
    super('Governing Token Owner or Delegate  must sign transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, GoverningTokenOwnerOrDelegateMustSignError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1f9,
  () => new GoverningTokenOwnerOrDelegateMustSignError()
)
createErrorFromNameLookup.set(
  'GoverningTokenOwnerOrDelegateMustSign',
  () => new GoverningTokenOwnerOrDelegateMustSignError()
)

/**
 * AllVotesMustBeRelinquishedToWithdrawGoverningTokens: 'All votes must be relinquished to withdraw governing tokens'
 *
 * @category Errors
 * @category generated
 */
export class AllVotesMustBeRelinquishedToWithdrawGoverningTokensError extends Error {
  readonly code: number = 0x1fa
  readonly name: string = 'AllVotesMustBeRelinquishedToWithdrawGoverningTokens'
  constructor() {
    super('All votes must be relinquished to withdraw governing tokens')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        AllVotesMustBeRelinquishedToWithdrawGoverningTokensError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x1fa,
  () => new AllVotesMustBeRelinquishedToWithdrawGoverningTokensError()
)
createErrorFromNameLookup.set(
  'AllVotesMustBeRelinquishedToWithdrawGoverningTokens',
  () => new AllVotesMustBeRelinquishedToWithdrawGoverningTokensError()
)

/**
 * InvalidTokenOwnerRecordAccountAddress: 'Invalid Token Owner Record account address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenOwnerRecordAccountAddressError extends Error {
  readonly code: number = 0x1fb
  readonly name: string = 'InvalidTokenOwnerRecordAccountAddress'
  constructor() {
    super('Invalid Token Owner Record account address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenOwnerRecordAccountAddressError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1fb,
  () => new InvalidTokenOwnerRecordAccountAddressError()
)
createErrorFromNameLookup.set(
  'InvalidTokenOwnerRecordAccountAddress',
  () => new InvalidTokenOwnerRecordAccountAddressError()
)

/**
 * InvalidGoverningMintForTokenOwnerRecord: 'Invalid GoverningMint for TokenOwnerRecord'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGoverningMintForTokenOwnerRecordError extends Error {
  readonly code: number = 0x1fc
  readonly name: string = 'InvalidGoverningMintForTokenOwnerRecord'
  constructor() {
    super('Invalid GoverningMint for TokenOwnerRecord')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InvalidGoverningMintForTokenOwnerRecordError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x1fc,
  () => new InvalidGoverningMintForTokenOwnerRecordError()
)
createErrorFromNameLookup.set(
  'InvalidGoverningMintForTokenOwnerRecord',
  () => new InvalidGoverningMintForTokenOwnerRecordError()
)

/**
 * InvalidRealmForTokenOwnerRecord: 'Invalid Realm for TokenOwnerRecord'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRealmForTokenOwnerRecordError extends Error {
  readonly code: number = 0x1fd
  readonly name: string = 'InvalidRealmForTokenOwnerRecord'
  constructor() {
    super('Invalid Realm for TokenOwnerRecord')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRealmForTokenOwnerRecordError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1fd,
  () => new InvalidRealmForTokenOwnerRecordError()
)
createErrorFromNameLookup.set(
  'InvalidRealmForTokenOwnerRecord',
  () => new InvalidRealmForTokenOwnerRecordError()
)

/**
 * InvalidProposalForProposalTransaction: 'Invalid Proposal for ProposalTransaction,'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProposalForProposalTransactionError extends Error {
  readonly code: number = 0x1fe
  readonly name: string = 'InvalidProposalForProposalTransaction'
  constructor() {
    super('Invalid Proposal for ProposalTransaction,')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProposalForProposalTransactionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1fe,
  () => new InvalidProposalForProposalTransactionError()
)
createErrorFromNameLookup.set(
  'InvalidProposalForProposalTransaction',
  () => new InvalidProposalForProposalTransactionError()
)

/**
 * InvalidSignatoryAddress: 'Invalid Signatory account address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSignatoryAddressError extends Error {
  readonly code: number = 0x1ff
  readonly name: string = 'InvalidSignatoryAddress'
  constructor() {
    super('Invalid Signatory account address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSignatoryAddressError)
    }
  }
}

createErrorFromCodeLookup.set(0x1ff, () => new InvalidSignatoryAddressError())
createErrorFromNameLookup.set(
  'InvalidSignatoryAddress',
  () => new InvalidSignatoryAddressError()
)

/**
 * SignatoryAlreadySignedOff: 'Signatory already signed off'
 *
 * @category Errors
 * @category generated
 */
export class SignatoryAlreadySignedOffError extends Error {
  readonly code: number = 0x200
  readonly name: string = 'SignatoryAlreadySignedOff'
  constructor() {
    super('Signatory already signed off')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SignatoryAlreadySignedOffError)
    }
  }
}

createErrorFromCodeLookup.set(0x200, () => new SignatoryAlreadySignedOffError())
createErrorFromNameLookup.set(
  'SignatoryAlreadySignedOff',
  () => new SignatoryAlreadySignedOffError()
)

/**
 * SignatoryMustSign: 'Signatory must sign'
 *
 * @category Errors
 * @category generated
 */
export class SignatoryMustSignError extends Error {
  readonly code: number = 0x201
  readonly name: string = 'SignatoryMustSign'
  constructor() {
    super('Signatory must sign')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SignatoryMustSignError)
    }
  }
}

createErrorFromCodeLookup.set(0x201, () => new SignatoryMustSignError())
createErrorFromNameLookup.set(
  'SignatoryMustSign',
  () => new SignatoryMustSignError()
)

/**
 * InvalidProposalOwnerAccount: 'Invalid Proposal Owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProposalOwnerAccountError extends Error {
  readonly code: number = 0x202
  readonly name: string = 'InvalidProposalOwnerAccount'
  constructor() {
    super('Invalid Proposal Owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProposalOwnerAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x202,
  () => new InvalidProposalOwnerAccountError()
)
createErrorFromNameLookup.set(
  'InvalidProposalOwnerAccount',
  () => new InvalidProposalOwnerAccountError()
)

/**
 * InvalidProposalForVoterRecord: 'Invalid Proposal for VoterRecord'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProposalForVoterRecordError extends Error {
  readonly code: number = 0x203
  readonly name: string = 'InvalidProposalForVoterRecord'
  constructor() {
    super('Invalid Proposal for VoterRecord')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProposalForVoterRecordError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x203,
  () => new InvalidProposalForVoterRecordError()
)
createErrorFromNameLookup.set(
  'InvalidProposalForVoterRecord',
  () => new InvalidProposalForVoterRecordError()
)

/**
 * InvalidGoverningTokenOwnerForVoteRecord: 'Invalid GoverningTokenOwner for VoteRecord'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGoverningTokenOwnerForVoteRecordError extends Error {
  readonly code: number = 0x204
  readonly name: string = 'InvalidGoverningTokenOwnerForVoteRecord'
  constructor() {
    super('Invalid GoverningTokenOwner for VoteRecord')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InvalidGoverningTokenOwnerForVoteRecordError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x204,
  () => new InvalidGoverningTokenOwnerForVoteRecordError()
)
createErrorFromNameLookup.set(
  'InvalidGoverningTokenOwnerForVoteRecord',
  () => new InvalidGoverningTokenOwnerForVoteRecordError()
)

/**
 * InvalidVoteThresholdPercentage: 'Invalid Governance config: Vote threshold percentage out of range'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoteThresholdPercentageError extends Error {
  readonly code: number = 0x205
  readonly name: string = 'InvalidVoteThresholdPercentage'
  constructor() {
    super('Invalid Governance config: Vote threshold percentage out of range')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVoteThresholdPercentageError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x205,
  () => new InvalidVoteThresholdPercentageError()
)
createErrorFromNameLookup.set(
  'InvalidVoteThresholdPercentage',
  () => new InvalidVoteThresholdPercentageError()
)

/**
 * ProposalAlreadyExists: 'Proposal for the given Governance, Governing Token Mint and index already exists'
 *
 * @category Errors
 * @category generated
 */
export class ProposalAlreadyExistsError extends Error {
  readonly code: number = 0x206
  readonly name: string = 'ProposalAlreadyExists'
  constructor() {
    super(
      'Proposal for the given Governance, Governing Token Mint and index already exists'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalAlreadyExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x206, () => new ProposalAlreadyExistsError())
createErrorFromNameLookup.set(
  'ProposalAlreadyExists',
  () => new ProposalAlreadyExistsError()
)

/**
 * VoteAlreadyExists: 'Token Owner already voted on the Proposal'
 *
 * @category Errors
 * @category generated
 */
export class VoteAlreadyExistsError extends Error {
  readonly code: number = 0x207
  readonly name: string = 'VoteAlreadyExists'
  constructor() {
    super('Token Owner already voted on the Proposal')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoteAlreadyExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x207, () => new VoteAlreadyExistsError())
createErrorFromNameLookup.set(
  'VoteAlreadyExists',
  () => new VoteAlreadyExistsError()
)

/**
 * NotEnoughTokensToCreateProposal: 'Owner doesn't have enough governing tokens to create Proposal'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughTokensToCreateProposalError extends Error {
  readonly code: number = 0x208
  readonly name: string = 'NotEnoughTokensToCreateProposal'
  constructor() {
    super("Owner doesn't have enough governing tokens to create Proposal")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEnoughTokensToCreateProposalError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x208,
  () => new NotEnoughTokensToCreateProposalError()
)
createErrorFromNameLookup.set(
  'NotEnoughTokensToCreateProposal',
  () => new NotEnoughTokensToCreateProposalError()
)

/**
 * InvalidStateCannotEditSignatories: 'Invalid State: Can't edit Signatories'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStateCannotEditSignatoriesError extends Error {
  readonly code: number = 0x209
  readonly name: string = 'InvalidStateCannotEditSignatories'
  constructor() {
    super("Invalid State: Can't edit Signatories")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStateCannotEditSignatoriesError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x209,
  () => new InvalidStateCannotEditSignatoriesError()
)
createErrorFromNameLookup.set(
  'InvalidStateCannotEditSignatories',
  () => new InvalidStateCannotEditSignatoriesError()
)

/**
 * InvalidProposalState: 'Invalid Proposal state'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProposalStateError extends Error {
  readonly code: number = 0x20a
  readonly name: string = 'InvalidProposalState'
  constructor() {
    super('Invalid Proposal state')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProposalStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x20a, () => new InvalidProposalStateError())
createErrorFromNameLookup.set(
  'InvalidProposalState',
  () => new InvalidProposalStateError()
)

/**
 * InvalidStateCannotEditTransactions: 'Invalid State: Can't edit transactions'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStateCannotEditTransactionsError extends Error {
  readonly code: number = 0x20b
  readonly name: string = 'InvalidStateCannotEditTransactions'
  constructor() {
    super("Invalid State: Can't edit transactions")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStateCannotEditTransactionsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x20b,
  () => new InvalidStateCannotEditTransactionsError()
)
createErrorFromNameLookup.set(
  'InvalidStateCannotEditTransactions',
  () => new InvalidStateCannotEditTransactionsError()
)

/**
 * InvalidStateCannotExecuteTransaction: 'Invalid State: Can't execute transaction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStateCannotExecuteTransactionError extends Error {
  readonly code: number = 0x20c
  readonly name: string = 'InvalidStateCannotExecuteTransaction'
  constructor() {
    super("Invalid State: Can't execute transaction")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStateCannotExecuteTransactionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x20c,
  () => new InvalidStateCannotExecuteTransactionError()
)
createErrorFromNameLookup.set(
  'InvalidStateCannotExecuteTransaction',
  () => new InvalidStateCannotExecuteTransactionError()
)

/**
 * CannotExecuteTransactionWithinHoldUpTime: 'Can't execute transaction within its hold up time'
 *
 * @category Errors
 * @category generated
 */
export class CannotExecuteTransactionWithinHoldUpTimeError extends Error {
  readonly code: number = 0x20d
  readonly name: string = 'CannotExecuteTransactionWithinHoldUpTime'
  constructor() {
    super("Can't execute transaction within its hold up time")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        CannotExecuteTransactionWithinHoldUpTimeError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x20d,
  () => new CannotExecuteTransactionWithinHoldUpTimeError()
)
createErrorFromNameLookup.set(
  'CannotExecuteTransactionWithinHoldUpTime',
  () => new CannotExecuteTransactionWithinHoldUpTimeError()
)

/**
 * TransactionAlreadyExecuted: 'Transaction already executed'
 *
 * @category Errors
 * @category generated
 */
export class TransactionAlreadyExecutedError extends Error {
  readonly code: number = 0x20e
  readonly name: string = 'TransactionAlreadyExecuted'
  constructor() {
    super('Transaction already executed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransactionAlreadyExecutedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x20e,
  () => new TransactionAlreadyExecutedError()
)
createErrorFromNameLookup.set(
  'TransactionAlreadyExecuted',
  () => new TransactionAlreadyExecutedError()
)

/**
 * InvalidTransactionIndex: 'Invalid Transaction index'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTransactionIndexError extends Error {
  readonly code: number = 0x20f
  readonly name: string = 'InvalidTransactionIndex'
  constructor() {
    super('Invalid Transaction index')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTransactionIndexError)
    }
  }
}

createErrorFromCodeLookup.set(0x20f, () => new InvalidTransactionIndexError())
createErrorFromNameLookup.set(
  'InvalidTransactionIndex',
  () => new InvalidTransactionIndexError()
)

/**
 * TransactionHoldUpTimeBelowRequiredMin: 'Transaction hold up time is below the min specified by Governance'
 *
 * @category Errors
 * @category generated
 */
export class TransactionHoldUpTimeBelowRequiredMinError extends Error {
  readonly code: number = 0x210
  readonly name: string = 'TransactionHoldUpTimeBelowRequiredMin'
  constructor() {
    super('Transaction hold up time is below the min specified by Governance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransactionHoldUpTimeBelowRequiredMinError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x210,
  () => new TransactionHoldUpTimeBelowRequiredMinError()
)
createErrorFromNameLookup.set(
  'TransactionHoldUpTimeBelowRequiredMin',
  () => new TransactionHoldUpTimeBelowRequiredMinError()
)

/**
 * TransactionAlreadyExists: 'Transaction at the given index for the Proposal already exists'
 *
 * @category Errors
 * @category generated
 */
export class TransactionAlreadyExistsError extends Error {
  readonly code: number = 0x211
  readonly name: string = 'TransactionAlreadyExists'
  constructor() {
    super('Transaction at the given index for the Proposal already exists')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransactionAlreadyExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x211, () => new TransactionAlreadyExistsError())
createErrorFromNameLookup.set(
  'TransactionAlreadyExists',
  () => new TransactionAlreadyExistsError()
)

/**
 * InvalidStateCannotSignOff: 'Invalid State: Can't sign off'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStateCannotSignOffError extends Error {
  readonly code: number = 0x212
  readonly name: string = 'InvalidStateCannotSignOff'
  constructor() {
    super("Invalid State: Can't sign off")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStateCannotSignOffError)
    }
  }
}

createErrorFromCodeLookup.set(0x212, () => new InvalidStateCannotSignOffError())
createErrorFromNameLookup.set(
  'InvalidStateCannotSignOff',
  () => new InvalidStateCannotSignOffError()
)

/**
 * InvalidStateCannotVote: 'Invalid State: Can't vote'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStateCannotVoteError extends Error {
  readonly code: number = 0x213
  readonly name: string = 'InvalidStateCannotVote'
  constructor() {
    super("Invalid State: Can't vote")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStateCannotVoteError)
    }
  }
}

createErrorFromCodeLookup.set(0x213, () => new InvalidStateCannotVoteError())
createErrorFromNameLookup.set(
  'InvalidStateCannotVote',
  () => new InvalidStateCannotVoteError()
)

/**
 * InvalidStateCannotFinalize: 'Invalid State: Can't finalize vote'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStateCannotFinalizeError extends Error {
  readonly code: number = 0x214
  readonly name: string = 'InvalidStateCannotFinalize'
  constructor() {
    super("Invalid State: Can't finalize vote")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStateCannotFinalizeError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x214,
  () => new InvalidStateCannotFinalizeError()
)
createErrorFromNameLookup.set(
  'InvalidStateCannotFinalize',
  () => new InvalidStateCannotFinalizeError()
)

/**
 * InvalidStateCannotCancelProposal: 'Invalid State: Can't cancel Proposal'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStateCannotCancelProposalError extends Error {
  readonly code: number = 0x215
  readonly name: string = 'InvalidStateCannotCancelProposal'
  constructor() {
    super("Invalid State: Can't cancel Proposal")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStateCannotCancelProposalError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x215,
  () => new InvalidStateCannotCancelProposalError()
)
createErrorFromNameLookup.set(
  'InvalidStateCannotCancelProposal',
  () => new InvalidStateCannotCancelProposalError()
)

/**
 * VoteAlreadyRelinquished: 'Vote already relinquished'
 *
 * @category Errors
 * @category generated
 */
export class VoteAlreadyRelinquishedError extends Error {
  readonly code: number = 0x216
  readonly name: string = 'VoteAlreadyRelinquished'
  constructor() {
    super('Vote already relinquished')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoteAlreadyRelinquishedError)
    }
  }
}

createErrorFromCodeLookup.set(0x216, () => new VoteAlreadyRelinquishedError())
createErrorFromNameLookup.set(
  'VoteAlreadyRelinquished',
  () => new VoteAlreadyRelinquishedError()
)

/**
 * CannotFinalizeVotingInProgress: 'Can't finalize vote. Voting still in progress'
 *
 * @category Errors
 * @category generated
 */
export class CannotFinalizeVotingInProgressError extends Error {
  readonly code: number = 0x217
  readonly name: string = 'CannotFinalizeVotingInProgress'
  constructor() {
    super("Can't finalize vote. Voting still in progress")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotFinalizeVotingInProgressError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x217,
  () => new CannotFinalizeVotingInProgressError()
)
createErrorFromNameLookup.set(
  'CannotFinalizeVotingInProgress',
  () => new CannotFinalizeVotingInProgressError()
)

/**
 * ProposalVotingTimeExpired: 'Proposal voting time expired'
 *
 * @category Errors
 * @category generated
 */
export class ProposalVotingTimeExpiredError extends Error {
  readonly code: number = 0x218
  readonly name: string = 'ProposalVotingTimeExpired'
  constructor() {
    super('Proposal voting time expired')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalVotingTimeExpiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x218, () => new ProposalVotingTimeExpiredError())
createErrorFromNameLookup.set(
  'ProposalVotingTimeExpired',
  () => new ProposalVotingTimeExpiredError()
)

/**
 * InvalidSignatoryMint: 'Invalid Signatory Mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSignatoryMintError extends Error {
  readonly code: number = 0x219
  readonly name: string = 'InvalidSignatoryMint'
  constructor() {
    super('Invalid Signatory Mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSignatoryMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x219, () => new InvalidSignatoryMintError())
createErrorFromNameLookup.set(
  'InvalidSignatoryMint',
  () => new InvalidSignatoryMintError()
)

/**
 * InvalidGovernanceForProposal: 'Proposal does not belong to the given Governance'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceForProposalError extends Error {
  readonly code: number = 0x21a
  readonly name: string = 'InvalidGovernanceForProposal'
  constructor() {
    super('Proposal does not belong to the given Governance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceForProposalError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x21a,
  () => new InvalidGovernanceForProposalError()
)
createErrorFromNameLookup.set(
  'InvalidGovernanceForProposal',
  () => new InvalidGovernanceForProposalError()
)

/**
 * InvalidGoverningMintForProposal: 'Proposal does not belong to given Governing Mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGoverningMintForProposalError extends Error {
  readonly code: number = 0x21b
  readonly name: string = 'InvalidGoverningMintForProposal'
  constructor() {
    super('Proposal does not belong to given Governing Mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGoverningMintForProposalError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x21b,
  () => new InvalidGoverningMintForProposalError()
)
createErrorFromNameLookup.set(
  'InvalidGoverningMintForProposal',
  () => new InvalidGoverningMintForProposalError()
)

/**
 * MintAuthorityMustSign: 'Current mint authority must sign transaction'
 *
 * @category Errors
 * @category generated
 */
export class MintAuthorityMustSignError extends Error {
  readonly code: number = 0x21c
  readonly name: string = 'MintAuthorityMustSign'
  constructor() {
    super('Current mint authority must sign transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintAuthorityMustSignError)
    }
  }
}

createErrorFromCodeLookup.set(0x21c, () => new MintAuthorityMustSignError())
createErrorFromNameLookup.set(
  'MintAuthorityMustSign',
  () => new MintAuthorityMustSignError()
)

/**
 * InvalidMintAuthority: 'Invalid mint authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintAuthorityError extends Error {
  readonly code: number = 0x21d
  readonly name: string = 'InvalidMintAuthority'
  constructor() {
    super('Invalid mint authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x21d, () => new InvalidMintAuthorityError())
createErrorFromNameLookup.set(
  'InvalidMintAuthority',
  () => new InvalidMintAuthorityError()
)

/**
 * MintHasNoAuthority: 'Mint has no authority'
 *
 * @category Errors
 * @category generated
 */
export class MintHasNoAuthorityError extends Error {
  readonly code: number = 0x21e
  readonly name: string = 'MintHasNoAuthority'
  constructor() {
    super('Mint has no authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintHasNoAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x21e, () => new MintHasNoAuthorityError())
createErrorFromNameLookup.set(
  'MintHasNoAuthority',
  () => new MintHasNoAuthorityError()
)

/**
 * SplTokenAccountWithInvalidOwner: 'Invalid Token account owner'
 *
 * @category Errors
 * @category generated
 */
export class SplTokenAccountWithInvalidOwnerError extends Error {
  readonly code: number = 0x21f
  readonly name: string = 'SplTokenAccountWithInvalidOwner'
  constructor() {
    super('Invalid Token account owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SplTokenAccountWithInvalidOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x21f,
  () => new SplTokenAccountWithInvalidOwnerError()
)
createErrorFromNameLookup.set(
  'SplTokenAccountWithInvalidOwner',
  () => new SplTokenAccountWithInvalidOwnerError()
)

/**
 * SplTokenMintWithInvalidOwner: 'Invalid Mint account owner'
 *
 * @category Errors
 * @category generated
 */
export class SplTokenMintWithInvalidOwnerError extends Error {
  readonly code: number = 0x220
  readonly name: string = 'SplTokenMintWithInvalidOwner'
  constructor() {
    super('Invalid Mint account owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SplTokenMintWithInvalidOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x220,
  () => new SplTokenMintWithInvalidOwnerError()
)
createErrorFromNameLookup.set(
  'SplTokenMintWithInvalidOwner',
  () => new SplTokenMintWithInvalidOwnerError()
)

/**
 * SplTokenAccountNotInitialized: 'Token Account is not initialized'
 *
 * @category Errors
 * @category generated
 */
export class SplTokenAccountNotInitializedError extends Error {
  readonly code: number = 0x221
  readonly name: string = 'SplTokenAccountNotInitialized'
  constructor() {
    super('Token Account is not initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SplTokenAccountNotInitializedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x221,
  () => new SplTokenAccountNotInitializedError()
)
createErrorFromNameLookup.set(
  'SplTokenAccountNotInitialized',
  () => new SplTokenAccountNotInitializedError()
)

/**
 * SplTokenAccountDoesNotExist: 'Token Account doesn't exist'
 *
 * @category Errors
 * @category generated
 */
export class SplTokenAccountDoesNotExistError extends Error {
  readonly code: number = 0x222
  readonly name: string = 'SplTokenAccountDoesNotExist'
  constructor() {
    super("Token Account doesn't exist")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SplTokenAccountDoesNotExistError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x222,
  () => new SplTokenAccountDoesNotExistError()
)
createErrorFromNameLookup.set(
  'SplTokenAccountDoesNotExist',
  () => new SplTokenAccountDoesNotExistError()
)

/**
 * SplTokenInvalidTokenAccountData: 'Token account data is invalid'
 *
 * @category Errors
 * @category generated
 */
export class SplTokenInvalidTokenAccountDataError extends Error {
  readonly code: number = 0x223
  readonly name: string = 'SplTokenInvalidTokenAccountData'
  constructor() {
    super('Token account data is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SplTokenInvalidTokenAccountDataError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x223,
  () => new SplTokenInvalidTokenAccountDataError()
)
createErrorFromNameLookup.set(
  'SplTokenInvalidTokenAccountData',
  () => new SplTokenInvalidTokenAccountDataError()
)

/**
 * SplTokenInvalidMintAccountData: 'Token mint account data is invalid'
 *
 * @category Errors
 * @category generated
 */
export class SplTokenInvalidMintAccountDataError extends Error {
  readonly code: number = 0x224
  readonly name: string = 'SplTokenInvalidMintAccountData'
  constructor() {
    super('Token mint account data is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SplTokenInvalidMintAccountDataError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x224,
  () => new SplTokenInvalidMintAccountDataError()
)
createErrorFromNameLookup.set(
  'SplTokenInvalidMintAccountData',
  () => new SplTokenInvalidMintAccountDataError()
)

/**
 * SplTokenMintNotInitialized: 'Token Mint account is not initialized'
 *
 * @category Errors
 * @category generated
 */
export class SplTokenMintNotInitializedError extends Error {
  readonly code: number = 0x225
  readonly name: string = 'SplTokenMintNotInitialized'
  constructor() {
    super('Token Mint account is not initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SplTokenMintNotInitializedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x225,
  () => new SplTokenMintNotInitializedError()
)
createErrorFromNameLookup.set(
  'SplTokenMintNotInitialized',
  () => new SplTokenMintNotInitializedError()
)

/**
 * SplTokenMintDoesNotExist: 'Token Mint account doesn't exist'
 *
 * @category Errors
 * @category generated
 */
export class SplTokenMintDoesNotExistError extends Error {
  readonly code: number = 0x226
  readonly name: string = 'SplTokenMintDoesNotExist'
  constructor() {
    super("Token Mint account doesn't exist")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SplTokenMintDoesNotExistError)
    }
  }
}

createErrorFromCodeLookup.set(0x226, () => new SplTokenMintDoesNotExistError())
createErrorFromNameLookup.set(
  'SplTokenMintDoesNotExist',
  () => new SplTokenMintDoesNotExistError()
)

/**
 * InvalidProgramDataAccountAddress: 'Invalid ProgramData account address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProgramDataAccountAddressError extends Error {
  readonly code: number = 0x227
  readonly name: string = 'InvalidProgramDataAccountAddress'
  constructor() {
    super('Invalid ProgramData account address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProgramDataAccountAddressError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x227,
  () => new InvalidProgramDataAccountAddressError()
)
createErrorFromNameLookup.set(
  'InvalidProgramDataAccountAddress',
  () => new InvalidProgramDataAccountAddressError()
)

/**
 * InvalidProgramDataAccountData: 'Invalid ProgramData account Data'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProgramDataAccountDataError extends Error {
  readonly code: number = 0x228
  readonly name: string = 'InvalidProgramDataAccountData'
  constructor() {
    super('Invalid ProgramData account Data')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProgramDataAccountDataError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x228,
  () => new InvalidProgramDataAccountDataError()
)
createErrorFromNameLookup.set(
  'InvalidProgramDataAccountData',
  () => new InvalidProgramDataAccountDataError()
)

/**
 * InvalidUpgradeAuthority: 'Provided upgrade authority doesn't match current program upgrade authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUpgradeAuthorityError extends Error {
  readonly code: number = 0x229
  readonly name: string = 'InvalidUpgradeAuthority'
  constructor() {
    super(
      "Provided upgrade authority doesn't match current program upgrade authority"
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUpgradeAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x229, () => new InvalidUpgradeAuthorityError())
createErrorFromNameLookup.set(
  'InvalidUpgradeAuthority',
  () => new InvalidUpgradeAuthorityError()
)

/**
 * UpgradeAuthorityMustSign: 'Current program upgrade authority must sign transaction'
 *
 * @category Errors
 * @category generated
 */
export class UpgradeAuthorityMustSignError extends Error {
  readonly code: number = 0x22a
  readonly name: string = 'UpgradeAuthorityMustSign'
  constructor() {
    super('Current program upgrade authority must sign transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UpgradeAuthorityMustSignError)
    }
  }
}

createErrorFromCodeLookup.set(0x22a, () => new UpgradeAuthorityMustSignError())
createErrorFromNameLookup.set(
  'UpgradeAuthorityMustSign',
  () => new UpgradeAuthorityMustSignError()
)

/**
 * ProgramNotUpgradable: 'Given program is not upgradable'
 *
 * @category Errors
 * @category generated
 */
export class ProgramNotUpgradableError extends Error {
  readonly code: number = 0x22b
  readonly name: string = 'ProgramNotUpgradable'
  constructor() {
    super('Given program is not upgradable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramNotUpgradableError)
    }
  }
}

createErrorFromCodeLookup.set(0x22b, () => new ProgramNotUpgradableError())
createErrorFromNameLookup.set(
  'ProgramNotUpgradable',
  () => new ProgramNotUpgradableError()
)

/**
 * InvalidTokenOwner: 'Invalid token owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenOwnerError extends Error {
  readonly code: number = 0x22c
  readonly name: string = 'InvalidTokenOwner'
  constructor() {
    super('Invalid token owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x22c, () => new InvalidTokenOwnerError())
createErrorFromNameLookup.set(
  'InvalidTokenOwner',
  () => new InvalidTokenOwnerError()
)

/**
 * TokenOwnerMustSign: 'Current token owner must sign transaction'
 *
 * @category Errors
 * @category generated
 */
export class TokenOwnerMustSignError extends Error {
  readonly code: number = 0x22d
  readonly name: string = 'TokenOwnerMustSign'
  constructor() {
    super('Current token owner must sign transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TokenOwnerMustSignError)
    }
  }
}

createErrorFromCodeLookup.set(0x22d, () => new TokenOwnerMustSignError())
createErrorFromNameLookup.set(
  'TokenOwnerMustSign',
  () => new TokenOwnerMustSignError()
)

/**
 * VoteThresholdTypeNotSupported: 'Given VoteThresholdType is not supported'
 *
 * @category Errors
 * @category generated
 */
export class VoteThresholdTypeNotSupportedError extends Error {
  readonly code: number = 0x22e
  readonly name: string = 'VoteThresholdTypeNotSupported'
  constructor() {
    super('Given VoteThresholdType is not supported')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoteThresholdTypeNotSupportedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x22e,
  () => new VoteThresholdTypeNotSupportedError()
)
createErrorFromNameLookup.set(
  'VoteThresholdTypeNotSupported',
  () => new VoteThresholdTypeNotSupportedError()
)

/**
 * VoteWeightSourceNotSupported: 'Given VoteWeightSource is not supported'
 *
 * @category Errors
 * @category generated
 */
export class VoteWeightSourceNotSupportedError extends Error {
  readonly code: number = 0x22f
  readonly name: string = 'VoteWeightSourceNotSupported'
  constructor() {
    super('Given VoteWeightSource is not supported')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoteWeightSourceNotSupportedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x22f,
  () => new VoteWeightSourceNotSupportedError()
)
createErrorFromNameLookup.set(
  'VoteWeightSourceNotSupported',
  () => new VoteWeightSourceNotSupportedError()
)

/**
 * GoverningTokenMintNotAllowedToVote: 'GoverningTokenMint not allowed to vote'
 *
 * @category Errors
 * @category generated
 */
export class GoverningTokenMintNotAllowedToVoteError extends Error {
  readonly code: number = 0x230
  readonly name: string = 'GoverningTokenMintNotAllowedToVote'
  constructor() {
    super('GoverningTokenMint not allowed to vote')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, GoverningTokenMintNotAllowedToVoteError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x230,
  () => new GoverningTokenMintNotAllowedToVoteError()
)
createErrorFromNameLookup.set(
  'GoverningTokenMintNotAllowedToVote',
  () => new GoverningTokenMintNotAllowedToVoteError()
)

/**
 * GovernancePdaMustSign: 'Governance PDA must sign'
 *
 * @category Errors
 * @category generated
 */
export class GovernancePdaMustSignError extends Error {
  readonly code: number = 0x231
  readonly name: string = 'GovernancePdaMustSign'
  constructor() {
    super('Governance PDA must sign')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, GovernancePdaMustSignError)
    }
  }
}

createErrorFromCodeLookup.set(0x231, () => new GovernancePdaMustSignError())
createErrorFromNameLookup.set(
  'GovernancePdaMustSign',
  () => new GovernancePdaMustSignError()
)

/**
 * TransactionAlreadyFlaggedWithError: 'Transaction already flagged with error'
 *
 * @category Errors
 * @category generated
 */
export class TransactionAlreadyFlaggedWithErrorError extends Error {
  readonly code: number = 0x232
  readonly name: string = 'TransactionAlreadyFlaggedWithError'
  constructor() {
    super('Transaction already flagged with error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransactionAlreadyFlaggedWithErrorError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x232,
  () => new TransactionAlreadyFlaggedWithErrorError()
)
createErrorFromNameLookup.set(
  'TransactionAlreadyFlaggedWithError',
  () => new TransactionAlreadyFlaggedWithErrorError()
)

/**
 * InvalidRealmForGovernance: 'Invalid Realm for Governance'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRealmForGovernanceError extends Error {
  readonly code: number = 0x233
  readonly name: string = 'InvalidRealmForGovernance'
  constructor() {
    super('Invalid Realm for Governance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRealmForGovernanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x233, () => new InvalidRealmForGovernanceError())
createErrorFromNameLookup.set(
  'InvalidRealmForGovernance',
  () => new InvalidRealmForGovernanceError()
)

/**
 * InvalidAuthorityForRealm: 'Invalid Authority for Realm'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityForRealmError extends Error {
  readonly code: number = 0x234
  readonly name: string = 'InvalidAuthorityForRealm'
  constructor() {
    super('Invalid Authority for Realm')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityForRealmError)
    }
  }
}

createErrorFromCodeLookup.set(0x234, () => new InvalidAuthorityForRealmError())
createErrorFromNameLookup.set(
  'InvalidAuthorityForRealm',
  () => new InvalidAuthorityForRealmError()
)

/**
 * RealmHasNoAuthority: 'Realm has no authority'
 *
 * @category Errors
 * @category generated
 */
export class RealmHasNoAuthorityError extends Error {
  readonly code: number = 0x235
  readonly name: string = 'RealmHasNoAuthority'
  constructor() {
    super('Realm has no authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RealmHasNoAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x235, () => new RealmHasNoAuthorityError())
createErrorFromNameLookup.set(
  'RealmHasNoAuthority',
  () => new RealmHasNoAuthorityError()
)

/**
 * RealmAuthorityMustSign: 'Realm authority must sign'
 *
 * @category Errors
 * @category generated
 */
export class RealmAuthorityMustSignError extends Error {
  readonly code: number = 0x236
  readonly name: string = 'RealmAuthorityMustSign'
  constructor() {
    super('Realm authority must sign')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RealmAuthorityMustSignError)
    }
  }
}

createErrorFromCodeLookup.set(0x236, () => new RealmAuthorityMustSignError())
createErrorFromNameLookup.set(
  'RealmAuthorityMustSign',
  () => new RealmAuthorityMustSignError()
)

/**
 * InvalidGoverningTokenHoldingAccount: 'Invalid governing token holding account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGoverningTokenHoldingAccountError extends Error {
  readonly code: number = 0x237
  readonly name: string = 'InvalidGoverningTokenHoldingAccount'
  constructor() {
    super('Invalid governing token holding account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGoverningTokenHoldingAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x237,
  () => new InvalidGoverningTokenHoldingAccountError()
)
createErrorFromNameLookup.set(
  'InvalidGoverningTokenHoldingAccount',
  () => new InvalidGoverningTokenHoldingAccountError()
)

/**
 * RealmCouncilMintChangeIsNotSupported: 'Realm council mint change is not supported'
 *
 * @category Errors
 * @category generated
 */
export class RealmCouncilMintChangeIsNotSupportedError extends Error {
  readonly code: number = 0x238
  readonly name: string = 'RealmCouncilMintChangeIsNotSupported'
  constructor() {
    super('Realm council mint change is not supported')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RealmCouncilMintChangeIsNotSupportedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x238,
  () => new RealmCouncilMintChangeIsNotSupportedError()
)
createErrorFromNameLookup.set(
  'RealmCouncilMintChangeIsNotSupported',
  () => new RealmCouncilMintChangeIsNotSupportedError()
)

/**
 * InvalidMaxVoterWeightAbsoluteValue: 'Invalid max voter weight absolute value'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMaxVoterWeightAbsoluteValueError extends Error {
  readonly code: number = 0x239
  readonly name: string = 'InvalidMaxVoterWeightAbsoluteValue'
  constructor() {
    super('Invalid max voter weight absolute value')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMaxVoterWeightAbsoluteValueError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x239,
  () => new InvalidMaxVoterWeightAbsoluteValueError()
)
createErrorFromNameLookup.set(
  'InvalidMaxVoterWeightAbsoluteValue',
  () => new InvalidMaxVoterWeightAbsoluteValueError()
)

/**
 * InvalidMaxVoterWeightSupplyFraction: 'Invalid max voter weight supply fraction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMaxVoterWeightSupplyFractionError extends Error {
  readonly code: number = 0x23a
  readonly name: string = 'InvalidMaxVoterWeightSupplyFraction'
  constructor() {
    super('Invalid max voter weight supply fraction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMaxVoterWeightSupplyFractionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x23a,
  () => new InvalidMaxVoterWeightSupplyFractionError()
)
createErrorFromNameLookup.set(
  'InvalidMaxVoterWeightSupplyFraction',
  () => new InvalidMaxVoterWeightSupplyFractionError()
)

/**
 * NotEnoughTokensToCreateGovernance: 'Owner doesn't have enough governing tokens to create Governance'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughTokensToCreateGovernanceError extends Error {
  readonly code: number = 0x23b
  readonly name: string = 'NotEnoughTokensToCreateGovernance'
  constructor() {
    super("Owner doesn't have enough governing tokens to create Governance")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEnoughTokensToCreateGovernanceError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x23b,
  () => new NotEnoughTokensToCreateGovernanceError()
)
createErrorFromNameLookup.set(
  'NotEnoughTokensToCreateGovernance',
  () => new NotEnoughTokensToCreateGovernanceError()
)

/**
 * TooManyOutstandingProposals: 'Too many outstanding proposals'
 *
 * @category Errors
 * @category generated
 */
export class TooManyOutstandingProposalsError extends Error {
  readonly code: number = 0x23c
  readonly name: string = 'TooManyOutstandingProposals'
  constructor() {
    super('Too many outstanding proposals')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooManyOutstandingProposalsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x23c,
  () => new TooManyOutstandingProposalsError()
)
createErrorFromNameLookup.set(
  'TooManyOutstandingProposals',
  () => new TooManyOutstandingProposalsError()
)

/**
 * AllProposalsMustBeFinalisedToWithdrawGoverningTokens: 'All proposals must be finalized to withdraw governing tokens'
 *
 * @category Errors
 * @category generated
 */
export class AllProposalsMustBeFinalisedToWithdrawGoverningTokensError extends Error {
  readonly code: number = 0x23d
  readonly name: string = 'AllProposalsMustBeFinalisedToWithdrawGoverningTokens'
  constructor() {
    super('All proposals must be finalized to withdraw governing tokens')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        AllProposalsMustBeFinalisedToWithdrawGoverningTokensError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x23d,
  () => new AllProposalsMustBeFinalisedToWithdrawGoverningTokensError()
)
createErrorFromNameLookup.set(
  'AllProposalsMustBeFinalisedToWithdrawGoverningTokens',
  () => new AllProposalsMustBeFinalisedToWithdrawGoverningTokensError()
)

/**
 * InvalidVoterWeightRecordForRealm: 'Invalid VoterWeightRecord for Realm'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoterWeightRecordForRealmError extends Error {
  readonly code: number = 0x23e
  readonly name: string = 'InvalidVoterWeightRecordForRealm'
  constructor() {
    super('Invalid VoterWeightRecord for Realm')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVoterWeightRecordForRealmError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x23e,
  () => new InvalidVoterWeightRecordForRealmError()
)
createErrorFromNameLookup.set(
  'InvalidVoterWeightRecordForRealm',
  () => new InvalidVoterWeightRecordForRealmError()
)

/**
 * InvalidVoterWeightRecordForGoverningTokenMint: 'Invalid VoterWeightRecord for GoverningTokenMint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoterWeightRecordForGoverningTokenMintError extends Error {
  readonly code: number = 0x23f
  readonly name: string = 'InvalidVoterWeightRecordForGoverningTokenMint'
  constructor() {
    super('Invalid VoterWeightRecord for GoverningTokenMint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InvalidVoterWeightRecordForGoverningTokenMintError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x23f,
  () => new InvalidVoterWeightRecordForGoverningTokenMintError()
)
createErrorFromNameLookup.set(
  'InvalidVoterWeightRecordForGoverningTokenMint',
  () => new InvalidVoterWeightRecordForGoverningTokenMintError()
)

/**
 * InvalidVoterWeightRecordForTokenOwner: 'Invalid VoterWeightRecord for TokenOwner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoterWeightRecordForTokenOwnerError extends Error {
  readonly code: number = 0x240
  readonly name: string = 'InvalidVoterWeightRecordForTokenOwner'
  constructor() {
    super('Invalid VoterWeightRecord for TokenOwner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVoterWeightRecordForTokenOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x240,
  () => new InvalidVoterWeightRecordForTokenOwnerError()
)
createErrorFromNameLookup.set(
  'InvalidVoterWeightRecordForTokenOwner',
  () => new InvalidVoterWeightRecordForTokenOwnerError()
)

/**
 * VoterWeightRecordExpired: 'VoterWeightRecord expired'
 *
 * @category Errors
 * @category generated
 */
export class VoterWeightRecordExpiredError extends Error {
  readonly code: number = 0x241
  readonly name: string = 'VoterWeightRecordExpired'
  constructor() {
    super('VoterWeightRecord expired')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoterWeightRecordExpiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x241, () => new VoterWeightRecordExpiredError())
createErrorFromNameLookup.set(
  'VoterWeightRecordExpired',
  () => new VoterWeightRecordExpiredError()
)

/**
 * InvalidRealmConfigForRealm: 'Invalid RealmConfig for Realm'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRealmConfigForRealmError extends Error {
  readonly code: number = 0x242
  readonly name: string = 'InvalidRealmConfigForRealm'
  constructor() {
    super('Invalid RealmConfig for Realm')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRealmConfigForRealmError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x242,
  () => new InvalidRealmConfigForRealmError()
)
createErrorFromNameLookup.set(
  'InvalidRealmConfigForRealm',
  () => new InvalidRealmConfigForRealmError()
)

/**
 * TokenOwnerRecordAlreadyExists: 'TokenOwnerRecord already exists'
 *
 * @category Errors
 * @category generated
 */
export class TokenOwnerRecordAlreadyExistsError extends Error {
  readonly code: number = 0x243
  readonly name: string = 'TokenOwnerRecordAlreadyExists'
  constructor() {
    super('TokenOwnerRecord already exists')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TokenOwnerRecordAlreadyExistsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x243,
  () => new TokenOwnerRecordAlreadyExistsError()
)
createErrorFromNameLookup.set(
  'TokenOwnerRecordAlreadyExists',
  () => new TokenOwnerRecordAlreadyExistsError()
)

/**
 * GoverningTokenDepositsNotAllowed: 'Governing token deposits not allowed'
 *
 * @category Errors
 * @category generated
 */
export class GoverningTokenDepositsNotAllowedError extends Error {
  readonly code: number = 0x244
  readonly name: string = 'GoverningTokenDepositsNotAllowed'
  constructor() {
    super('Governing token deposits not allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, GoverningTokenDepositsNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x244,
  () => new GoverningTokenDepositsNotAllowedError()
)
createErrorFromNameLookup.set(
  'GoverningTokenDepositsNotAllowed',
  () => new GoverningTokenDepositsNotAllowedError()
)

/**
 * InvalidVoteChoiceWeightPercentage: 'Invalid vote choice weight percentage'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoteChoiceWeightPercentageError extends Error {
  readonly code: number = 0x245
  readonly name: string = 'InvalidVoteChoiceWeightPercentage'
  constructor() {
    super('Invalid vote choice weight percentage')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVoteChoiceWeightPercentageError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x245,
  () => new InvalidVoteChoiceWeightPercentageError()
)
createErrorFromNameLookup.set(
  'InvalidVoteChoiceWeightPercentage',
  () => new InvalidVoteChoiceWeightPercentageError()
)

/**
 * VoteTypeNotSupported: 'Vote type not supported'
 *
 * @category Errors
 * @category generated
 */
export class VoteTypeNotSupportedError extends Error {
  readonly code: number = 0x246
  readonly name: string = 'VoteTypeNotSupported'
  constructor() {
    super('Vote type not supported')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoteTypeNotSupportedError)
    }
  }
}

createErrorFromCodeLookup.set(0x246, () => new VoteTypeNotSupportedError())
createErrorFromNameLookup.set(
  'VoteTypeNotSupported',
  () => new VoteTypeNotSupportedError()
)

/**
 * InvalidProposalOptions: 'Invalid proposal options'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProposalOptionsError extends Error {
  readonly code: number = 0x247
  readonly name: string = 'InvalidProposalOptions'
  constructor() {
    super('Invalid proposal options')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProposalOptionsError)
    }
  }
}

createErrorFromCodeLookup.set(0x247, () => new InvalidProposalOptionsError())
createErrorFromNameLookup.set(
  'InvalidProposalOptions',
  () => new InvalidProposalOptionsError()
)

/**
 * ProposalIsNotExecutable: 'Proposal is not not executable'
 *
 * @category Errors
 * @category generated
 */
export class ProposalIsNotExecutableError extends Error {
  readonly code: number = 0x248
  readonly name: string = 'ProposalIsNotExecutable'
  constructor() {
    super('Proposal is not not executable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalIsNotExecutableError)
    }
  }
}

createErrorFromCodeLookup.set(0x248, () => new ProposalIsNotExecutableError())
createErrorFromNameLookup.set(
  'ProposalIsNotExecutable',
  () => new ProposalIsNotExecutableError()
)

/**
 * InvalidVote: 'Invalid vote'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoteError extends Error {
  readonly code: number = 0x249
  readonly name: string = 'InvalidVote'
  constructor() {
    super('Invalid vote')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVoteError)
    }
  }
}

createErrorFromCodeLookup.set(0x249, () => new InvalidVoteError())
createErrorFromNameLookup.set('InvalidVote', () => new InvalidVoteError())

/**
 * CannotExecuteDefeatedOption: 'Cannot execute defeated option'
 *
 * @category Errors
 * @category generated
 */
export class CannotExecuteDefeatedOptionError extends Error {
  readonly code: number = 0x24a
  readonly name: string = 'CannotExecuteDefeatedOption'
  constructor() {
    super('Cannot execute defeated option')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotExecuteDefeatedOptionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x24a,
  () => new CannotExecuteDefeatedOptionError()
)
createErrorFromNameLookup.set(
  'CannotExecuteDefeatedOption',
  () => new CannotExecuteDefeatedOptionError()
)

/**
 * VoterWeightRecordInvalidAction: 'VoterWeightRecord invalid action'
 *
 * @category Errors
 * @category generated
 */
export class VoterWeightRecordInvalidActionError extends Error {
  readonly code: number = 0x24b
  readonly name: string = 'VoterWeightRecordInvalidAction'
  constructor() {
    super('VoterWeightRecord invalid action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoterWeightRecordInvalidActionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x24b,
  () => new VoterWeightRecordInvalidActionError()
)
createErrorFromNameLookup.set(
  'VoterWeightRecordInvalidAction',
  () => new VoterWeightRecordInvalidActionError()
)

/**
 * VoterWeightRecordInvalidActionTarget: 'VoterWeightRecord invalid action target'
 *
 * @category Errors
 * @category generated
 */
export class VoterWeightRecordInvalidActionTargetError extends Error {
  readonly code: number = 0x24c
  readonly name: string = 'VoterWeightRecordInvalidActionTarget'
  constructor() {
    super('VoterWeightRecord invalid action target')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoterWeightRecordInvalidActionTargetError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x24c,
  () => new VoterWeightRecordInvalidActionTargetError()
)
createErrorFromNameLookup.set(
  'VoterWeightRecordInvalidActionTarget',
  () => new VoterWeightRecordInvalidActionTargetError()
)

/**
 * InvalidMaxVoterWeightRecordForRealm: 'Invalid MaxVoterWeightRecord for Realm'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMaxVoterWeightRecordForRealmError extends Error {
  readonly code: number = 0x24d
  readonly name: string = 'InvalidMaxVoterWeightRecordForRealm'
  constructor() {
    super('Invalid MaxVoterWeightRecord for Realm')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMaxVoterWeightRecordForRealmError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x24d,
  () => new InvalidMaxVoterWeightRecordForRealmError()
)
createErrorFromNameLookup.set(
  'InvalidMaxVoterWeightRecordForRealm',
  () => new InvalidMaxVoterWeightRecordForRealmError()
)

/**
 * InvalidMaxVoterWeightRecordForGoverningTokenMint: 'Invalid MaxVoterWeightRecord for GoverningTokenMint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMaxVoterWeightRecordForGoverningTokenMintError extends Error {
  readonly code: number = 0x24e
  readonly name: string = 'InvalidMaxVoterWeightRecordForGoverningTokenMint'
  constructor() {
    super('Invalid MaxVoterWeightRecord for GoverningTokenMint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InvalidMaxVoterWeightRecordForGoverningTokenMintError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x24e,
  () => new InvalidMaxVoterWeightRecordForGoverningTokenMintError()
)
createErrorFromNameLookup.set(
  'InvalidMaxVoterWeightRecordForGoverningTokenMint',
  () => new InvalidMaxVoterWeightRecordForGoverningTokenMintError()
)

/**
 * MaxVoterWeightRecordExpired: 'MaxVoterWeightRecord expired'
 *
 * @category Errors
 * @category generated
 */
export class MaxVoterWeightRecordExpiredError extends Error {
  readonly code: number = 0x24f
  readonly name: string = 'MaxVoterWeightRecordExpired'
  constructor() {
    super('MaxVoterWeightRecord expired')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxVoterWeightRecordExpiredError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x24f,
  () => new MaxVoterWeightRecordExpiredError()
)
createErrorFromNameLookup.set(
  'MaxVoterWeightRecordExpired',
  () => new MaxVoterWeightRecordExpiredError()
)

/**
 * NotSupportedVoteType: 'Not supported VoteType'
 *
 * @category Errors
 * @category generated
 */
export class NotSupportedVoteTypeError extends Error {
  readonly code: number = 0x250
  readonly name: string = 'NotSupportedVoteType'
  constructor() {
    super('Not supported VoteType')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotSupportedVoteTypeError)
    }
  }
}

createErrorFromCodeLookup.set(0x250, () => new NotSupportedVoteTypeError())
createErrorFromNameLookup.set(
  'NotSupportedVoteType',
  () => new NotSupportedVoteTypeError()
)

/**
 * RealmConfigChangeNotAllowed: 'RealmConfig change not allowed'
 *
 * @category Errors
 * @category generated
 */
export class RealmConfigChangeNotAllowedError extends Error {
  readonly code: number = 0x251
  readonly name: string = 'RealmConfigChangeNotAllowed'
  constructor() {
    super('RealmConfig change not allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RealmConfigChangeNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x251,
  () => new RealmConfigChangeNotAllowedError()
)
createErrorFromNameLookup.set(
  'RealmConfigChangeNotAllowed',
  () => new RealmConfigChangeNotAllowedError()
)

/**
 * GovernanceConfigChangeNotAllowed: 'GovernanceConfig change not allowed'
 *
 * @category Errors
 * @category generated
 */
export class GovernanceConfigChangeNotAllowedError extends Error {
  readonly code: number = 0x252
  readonly name: string = 'GovernanceConfigChangeNotAllowed'
  constructor() {
    super('GovernanceConfig change not allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, GovernanceConfigChangeNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x252,
  () => new GovernanceConfigChangeNotAllowedError()
)
createErrorFromNameLookup.set(
  'GovernanceConfigChangeNotAllowed',
  () => new GovernanceConfigChangeNotAllowedError()
)

/**
 * AtLeastOneVoteThresholdRequired: 'At least one VoteThreshold is required'
 *
 * @category Errors
 * @category generated
 */
export class AtLeastOneVoteThresholdRequiredError extends Error {
  readonly code: number = 0x253
  readonly name: string = 'AtLeastOneVoteThresholdRequired'
  constructor() {
    super('At least one VoteThreshold is required')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AtLeastOneVoteThresholdRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x253,
  () => new AtLeastOneVoteThresholdRequiredError()
)
createErrorFromNameLookup.set(
  'AtLeastOneVoteThresholdRequired',
  () => new AtLeastOneVoteThresholdRequiredError()
)

/**
 * ReservedBufferMustBeEmpty: 'Reserved buffer must be empty'
 *
 * @category Errors
 * @category generated
 */
export class ReservedBufferMustBeEmptyError extends Error {
  readonly code: number = 0x254
  readonly name: string = 'ReservedBufferMustBeEmpty'
  constructor() {
    super('Reserved buffer must be empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReservedBufferMustBeEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x254, () => new ReservedBufferMustBeEmptyError())
createErrorFromNameLookup.set(
  'ReservedBufferMustBeEmpty',
  () => new ReservedBufferMustBeEmptyError()
)

/**
 * CannotRelinquishInFinalizingState: 'Cannot Relinquish in Finalizing state'
 *
 * @category Errors
 * @category generated
 */
export class CannotRelinquishInFinalizingStateError extends Error {
  readonly code: number = 0x255
  readonly name: string = 'CannotRelinquishInFinalizingState'
  constructor() {
    super('Cannot Relinquish in Finalizing state')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotRelinquishInFinalizingStateError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x255,
  () => new CannotRelinquishInFinalizingStateError()
)
createErrorFromNameLookup.set(
  'CannotRelinquishInFinalizingState',
  () => new CannotRelinquishInFinalizingStateError()
)

/**
 * InvalidRealmConfigAddress: 'Invalid RealmConfig account address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRealmConfigAddressError extends Error {
  readonly code: number = 0x256
  readonly name: string = 'InvalidRealmConfigAddress'
  constructor() {
    super('Invalid RealmConfig account address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRealmConfigAddressError)
    }
  }
}

createErrorFromCodeLookup.set(0x256, () => new InvalidRealmConfigAddressError())
createErrorFromNameLookup.set(
  'InvalidRealmConfigAddress',
  () => new InvalidRealmConfigAddressError()
)

/**
 * CannotDepositDormantTokens: 'Cannot deposit dormant tokens'
 *
 * @category Errors
 * @category generated
 */
export class CannotDepositDormantTokensError extends Error {
  readonly code: number = 0x257
  readonly name: string = 'CannotDepositDormantTokens'
  constructor() {
    super('Cannot deposit dormant tokens')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotDepositDormantTokensError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x257,
  () => new CannotDepositDormantTokensError()
)
createErrorFromNameLookup.set(
  'CannotDepositDormantTokens',
  () => new CannotDepositDormantTokensError()
)

/**
 * CannotWithdrawMembershipTokens: 'Cannot withdraw membership tokens'
 *
 * @category Errors
 * @category generated
 */
export class CannotWithdrawMembershipTokensError extends Error {
  readonly code: number = 0x258
  readonly name: string = 'CannotWithdrawMembershipTokens'
  constructor() {
    super('Cannot withdraw membership tokens')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotWithdrawMembershipTokensError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x258,
  () => new CannotWithdrawMembershipTokensError()
)
createErrorFromNameLookup.set(
  'CannotWithdrawMembershipTokens',
  () => new CannotWithdrawMembershipTokensError()
)

/**
 * CannotRevokeGoverningTokens: 'Cannot revoke GoverningTokens'
 *
 * @category Errors
 * @category generated
 */
export class CannotRevokeGoverningTokensError extends Error {
  readonly code: number = 0x259
  readonly name: string = 'CannotRevokeGoverningTokens'
  constructor() {
    super('Cannot revoke GoverningTokens')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotRevokeGoverningTokensError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x259,
  () => new CannotRevokeGoverningTokensError()
)
createErrorFromNameLookup.set(
  'CannotRevokeGoverningTokens',
  () => new CannotRevokeGoverningTokensError()
)

/**
 * InvalidRevokeAmount: 'Invalid Revoke amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRevokeAmountError extends Error {
  readonly code: number = 0x25a
  readonly name: string = 'InvalidRevokeAmount'
  constructor() {
    super('Invalid Revoke amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRevokeAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x25a, () => new InvalidRevokeAmountError())
createErrorFromNameLookup.set(
  'InvalidRevokeAmount',
  () => new InvalidRevokeAmountError()
)

/**
 * InvalidGoverningTokenSource: 'Invalid GoverningToken source'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGoverningTokenSourceError extends Error {
  readonly code: number = 0x25b
  readonly name: string = 'InvalidGoverningTokenSource'
  constructor() {
    super('Invalid GoverningToken source')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGoverningTokenSourceError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x25b,
  () => new InvalidGoverningTokenSourceError()
)
createErrorFromNameLookup.set(
  'InvalidGoverningTokenSource',
  () => new InvalidGoverningTokenSourceError()
)

/**
 * CannotChangeCommunityTokenTypeToMemebership: 'Cannot change community TokenType to Memebership'
 *
 * @category Errors
 * @category generated
 */
export class CannotChangeCommunityTokenTypeToMemebershipError extends Error {
  readonly code: number = 0x25c
  readonly name: string = 'CannotChangeCommunityTokenTypeToMemebership'
  constructor() {
    super('Cannot change community TokenType to Memebership')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        CannotChangeCommunityTokenTypeToMemebershipError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x25c,
  () => new CannotChangeCommunityTokenTypeToMemebershipError()
)
createErrorFromNameLookup.set(
  'CannotChangeCommunityTokenTypeToMemebership',
  () => new CannotChangeCommunityTokenTypeToMemebershipError()
)

/**
 * VoterWeightThresholdDisabled: 'Voter weight threshold disabled'
 *
 * @category Errors
 * @category generated
 */
export class VoterWeightThresholdDisabledError extends Error {
  readonly code: number = 0x25d
  readonly name: string = 'VoterWeightThresholdDisabled'
  constructor() {
    super('Voter weight threshold disabled')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoterWeightThresholdDisabledError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x25d,
  () => new VoterWeightThresholdDisabledError()
)
createErrorFromNameLookup.set(
  'VoterWeightThresholdDisabled',
  () => new VoterWeightThresholdDisabledError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
